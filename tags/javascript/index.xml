<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>From An Egg</title>
    <link>http://fromanegg.com/tags/javascript/index.xml</link>
    <description>Recent content on From An Egg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://fromanegg.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Write JavaScript like it’s typed</title>
      <link>http://fromanegg.com/post/2015/06/06/write-javascript-like-its-typed</link>
      <pubDate>Sat, 06 Jun 2015 21:44:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2015/06/06/write-javascript-like-its-typed</guid>
      <description>&lt;p&gt;Over my career I’ve written in a number of different programming languages, most of them dynamic. It’s been about 10 years since I last wrote a project from start to finish in a typed language, C++, but recently I’ve been working with Go. It’s safe to say I had become blissfully ignorant of the benefits and challenges of a typed language and in working with Go I found myself really enjoying the explicit declaration of types with regards to stability and code legibility.&lt;/p&gt;

&lt;p&gt;In many JavaScript projects you’ll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function dataFiller() {
  var myObject = {};
  // 5 lines later
  myObject.Foo = &#39;bar&#39;;
  // 10 lines later
  myObject.Baz = &#39;bax&#39;;
  // 5 lines later
  return myObject;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This essentially means that you must read through an entire functions execution, and sometimes an entire modules execution to see what the structure of that object will become.&lt;/p&gt;

&lt;p&gt;Now lets compare that to Go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type myObject struct{
  Foo string
  Baz string
}

func dataFiller() *myObject {
  var data = &amp;amp;myObject{}
  // 5 lines later
  data.Foo = &amp;quot;bar&amp;quot;
  // 10 lines later
  data.Baz = &amp;quot;bax&amp;quot;
  // 5 lines later
  return data
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you don’t even have to read further than the function declaration to know what the function will return and then you simply have to reference that type in the file to know ahead of time what it’s structure will be.&lt;/p&gt;

&lt;p&gt;Throughout my time as a developer I’ve noticed that it’s quite rare that you cannot predict with 100% certainty what the data structure of your variables will be but, in dynamic languages, we don’t ever seem to outline that structure for people reading and writing the code. So this got me thinking about how this workflow can be adopted in JavaScript to give us the benefits of types using the native language constructs without having to use a compile target like Typescript. In practice it turns out to be quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Method to convert defined object literal &#39;type&#39;
// into a &#39;locked down&#39; data store.
function createObject(obj) {
  var stub = Object.create(null);
  var keys = Object.keys(obj).forEach(function(key) {    
    Object.defineProperty(stub, key, {
      configurable: true,
      enumerable: true,
      writable: true,
      value: obj[key]
    });
  });
  Object.seal(stub);
  return stub;
}

// Your &#39;type&#39; which will be used to create
// usable data store instances.
var myObject = {
  Foo: &#39;&#39;,
  Baz: &#39;&#39;
};

// Fills the object with data.
// @method dataFiller
// @return {myObject}
function dataFiller() {
  var data = createObject(myObject);
  // Set values like normal.
  data.Foo = &#39;bar&#39;;
  data.Baz = &#39;bax&#39;;
  return data;
}

var fullData = dataFiller();
fullData.Foo = &amp;quot;can Update&amp;quot;; // Updated
fullData.Qux = &amp;quot;Can&#39;t add new properties&amp;quot;; // Not added
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following this pattern will allow you to write JavaScript with predefined data type which helps tremendously in readability with minimal amount of additional work. This is just a basic example to show how the typed structure could be applied to JavaScript, the createObject() method could be expanded on to add getters and setters which could enforce the property types and you could even expand this idea to use Go like interfaces following a similar structure. I feel the trivial trade-off in additional lines of code is well worth the structure which is now being enforced. What do you think? Have you written a large JavaScript application before where predefined data structures helped? Let me know in the comments below or on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy testing of code involving native methods in JavaScript</title>
      <link>http://fromanegg.com/post/2015/04/22/easy-testing-of-code-involving-native-methods-in-javascript</link>
      <pubDate>Wed, 22 Apr 2015 19:57:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2015/04/22/easy-testing-of-code-involving-native-methods-in-javascript</guid>
      <description>&lt;p&gt;When using ‘use strict;’ in your scripts you’ll find that you are no longer allowed to overwrite native methods like FileReader() so how do you test that these methods are being called with the appropriate parameters? Lets start with a typical function call involving FileReader() and then modify it to make it easier to test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function importFile(file) {
  var reader = new FileReader();
  reader.onload = function(e) {
    processData(e.target.result);
  };
  reader.readAsText(file);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pre &amp;lsquo;use strict’; days you could simply stub out the global FileReader() but since that’s no longer an option we need to get a little creative with our code structure. First thing we’re going to do is create a FileReader instance generator function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function importFile(file) {
  var reader = generateFileReader();
  reader.onload = function(e) {
    processData(e.target.result);
  };
  reader.readAsText(file);
}

function generateFileReader() {
  return new FileReader();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we’ll move the onload callback to a named function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function importFile(file) {
  var reader = generateFileReader();
  reader.onload = _readerOnloadHandler;
  reader.readAsText(file);
}

function generateFileReader() {
  return new FileReader();
}

function _readerOnloadHandler(e) {
  processData(e.target.result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can test the importFile function and its parts by stubbing out the generateFileReader function to return a basic reader stub and not have to worry about the native method. In the following example I’m using two simple stubbing methods to generate stub functions and methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;it(&#39;parses files&#39;, function() {
    // Set up the stubs.
    var processStub = stubMethod(&#39;processData&#39;);
    // The second parameter of the stubMethod is what generateFileReader
    // will return when it&#39;s called.
    var reader = stubMethod(&#39;generateFileReader&#39;, {
      onload: null,
      readAsText: stubFunction();
    });
    // Call the public method.
    importFile(&#39;/path/to/file&#39;);
    // Make assertions
    assert.equal(reader.calledOnce(), true);
    assert.equal(reader.readAsText.calledOnce(), true);
    assert.equal(reader.readAsText.lastArguments()[0], &#39;/path/to/file&#39;);
    // Call the callback.
    reader.onload({ target: { result: &#39;file data&#39; }});
    // Make assertions
    assert.equal(processStub.calledOnce(), true);
    assert.equal(processStub.lastArguments()[0], &#39;file data&#39;);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Splitting up the code in this way makes unit testing possible because you are essentially wrapping the native function call in a function which are you are able to stub out. Happy testing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ParseInt only numbers in an object</title>
      <link>http://fromanegg.com/post/2013/09/15/parseint-only-numbers-in-an-object</link>
      <pubDate>Sun, 15 Sep 2013 10:08:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/09/15/parseint-only-numbers-in-an-object</guid>
      <description>&lt;p&gt;A couple weeks ago I had an issue…I needed to send the number values contained in an object to the server as integers. The only catch was, I didn’t know how many elements were in the object or which ones were supposed to be integers and which were supposed to be strings. I could however trust that the values in the object were appropriate for each key.&lt;/p&gt;

&lt;p&gt;I ended coming up with a little hack using some of JavaScripts type coercion to get the results I needed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var parsed;
Object.keys(values).forEach(function(key) {
  parsed = parseInt(values[key], 10);
  if (values[key] == parsed) {
    values[key] = parsed;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what’s happening here?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Object.keys(values).forEach(function(key) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am using the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys&#34;&gt;Object.keys()&lt;/a&gt; method to get the keys of each element in an array and then looping over them using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&#34;&gt;Array.prototype.forEach()&lt;/a&gt; instead of using a for loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;parsed = parseInt(values[key], 10);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the loop I parseInt every value and store it in a temporary variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (origVal == parsed) {
  values[key] = parsed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I compare the parsed value to the original value allowing JavaScript to do it’s type coercion and if they are equal then I overwrite the original value with the parsed value, else I continue on to the next element. This works because parseInt(“2”, 10) === 2 and 2 == “2” but parseInt(“2Foo”, 10) === 2 and 2 != “2Foo”. You can see a &lt;a href=&#34;http://output.jsbin.com/UFIMIPO/1/&#34;&gt;working example here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Although this has a fairly limited use case I hope you found the technique interesting albeit a little bit of a hack. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Test driven development - the easy way!</title>
      <link>http://fromanegg.com/post/2013/06/07/test-driven-development---the-easy-way</link>
      <pubDate>Fri, 07 Jun 2013 22:45:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/06/07/test-driven-development---the-easy-way</guid>
      <description>&lt;p&gt;A number of people, myself included, have a hard time getting started with &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;test driven development (TDD)&lt;/a&gt;. The issue lies in that it’s difficult to wrap your head around something that is rather non specific in its implementation and it is usually described as “writing your tests before you write your code”.&lt;/p&gt;

&lt;p&gt;When developers hear “Write your tests before you write your code”, then they look at their previous test suite they wonder… “How can I possibly write this without having written the code first?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;new Test.Case({
    testSomething : function () {
       var class = new MyClass();
	class.assert(...);
    },

    testSomethingElse : function () {
        //...
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Herein Lies the difficulty with doing test driven development, everyone says you write the tests first but in reality you write the structure of the class first. To illustrate this lets create a simple instantiable class using TDD. This class will need to receive data and then append a representation of that data to the DOM.&lt;/p&gt;

&lt;p&gt;Your first step is to outline each step the class needs to make in point form. This helps you visualize the whole completed class from start to finish before you type a single line of code. This will help you figure out any shortcomings in complex classes ahead of time so you don’t waste time writing code which will be thrown away.&lt;/p&gt;

&lt;p&gt;Our classes requirements:
is instantiable.
will accept a config object and create related instance properties.
will generate a string template using the configuration properties.
will generate a DOM element from the string template.
will append that element to the body.&lt;/p&gt;

&lt;p&gt;Next is to take these steps and create tests which prove that they work. To do that we need to use a test suite which makes test driven development easy. For this tutorial I am going to use Mocha (&lt;a href=&#34;http://visionmedia.github.io/mocha/&#34;&gt;http://visionmedia.github.io/mocha/&lt;/a&gt;) I won’t go into detail on this test framework as it’s out of the scope of this tutorial but it is pretty easy to pick up by following along.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;describe(‘DOM Info Generator’, function(){
  it(‘is instantiable’);
  it(‘will accept a config object and create related instance properties’);
  it(‘will generate a string template using the configuration properties’);
  it(‘will generate a DOM element from the string template’);
  it(‘will append that element to the body’);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now you can start to see what I mean when I said that we write the structure of the class first. In practice we aren’t writing the tests first at all, we are writing declarations of what our class will be doing.&lt;/p&gt;

&lt;p&gt;The third step is to start writing some code to satisfy these tests in order. Our first two tests say that our class needs to be instantiable and that it needs to accept a configuration object and create related instance properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function DomInfo(config) {
  this.name = config.name;
  this.job = config.job
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have the code completed to what we believe matches our first two tests we can write the tests. On a real project you would need to import your class into your test suite but for this tutorial we will just have our test suite after our class declaration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var assert = require(‘assert’);
describe(‘DOM Info Generator’, function() {
  var name = &#39;Spock&#39;,
        job = &#39;Science Officer&#39;,
        domInfo;

  // Code to execute before every test.
  beforeEach(function() {
    domInfo = new DomInfo({
      name: name,
      job: job
    });
  });

  // Code to execute after every test.
  afterEach(function() {
    domInfo = null;
  });

  // Tests
  it(‘is instantiable’, function() {
    assert.equal(domInfo instanceof DomInfo, true);
  });
  it(‘will accept a config object and create related instance properties’,
    function() {
      assert.equal(domInfo.name, name);
      assert.equal(domInfo.job, job);
    });

  ...
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stretching a little bit out of context of this tutorial I am setting up hooks (beforeEach, afterEach) to create a new instance of our class for every test, and then clean up that instance after every test.&lt;/p&gt;

&lt;p&gt;For our first test we take our new instance and test to make sure that it is an instance of our constructor. The second test we access the two instance properties of our class and check them against our known values.&lt;/p&gt;

&lt;p&gt;Moving on to our next two tests we need to take our configuration values generate a template and generate a DOM element from that template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function DomInfo(config) {
  this.name = config.name;
  this.job = config.job
  this.generateAndAppendTemplate();
}
DomInfo.prototype = {
  generateAndAppendTemplate: function() {
    this.generateTemplate();
    this.createDOMElement();
    this.appendElement();
  },
  generateTemplate: function() {
    this.template = ‘Hi ’ + this.name + ‘! Great job being a ‘ + this.job;
  },
  createDOMElement: function() {
    var greeting = document.createElement(&#39;div&#39;);
    greeting.className = &#39;greeting&#39;;
    greeting.textContent = this.template;
    this.element = greeting;
  },
  appendElement: function() {
    document.body.appendChild(this.element);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now to the tests to make sure that our code satisfies our goals. I left out the previous code and tests for brevity.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;...
  it(‘will generate a string template using the config properties’,
    function() {
      assert.equal(typeof domInfo.template === ‘string’);
      assert.notEqual(domInfo.template.indexOf(name’), -1);
      assert.notEqual(domInfo.template.indexOf(job), -1);
    });
  it(‘will generate a DOM element from the string template’, function() {
    assert.equal(typeof domInfo.element === ‘object’);
  });
  it(‘will append that element to the body’, function() {
    assert.notEqual(document.querySelector(‘.greeting’), null);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By now you are probably getting the hang of this.&lt;/p&gt;

&lt;p&gt;To recap, the easiest way to understand test driven development, or TDD, is to &lt;strong&gt;outline our class into declarations of intent&lt;/strong&gt;. Then, &lt;strong&gt;test by test, write the code to satisfy those declarations&lt;/strong&gt; and the tests to ensure that they stay satisfied. Running the tests constantly to be sure that we are always moving forward. If you find that after satisfying one of your new tests, or after a refactor, you have broken some tests you must then stop and make those tests pass again. &lt;strong&gt;You cannot advance unless all previous tests pass&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I hope that this approach will help those of you who haven’t been able to wrap your head around test driven development be productive. Properly developing large applications using test driven development helps to all but remove code rewrites from improperly spec’d code and hidden regressions because you outline the classes intent and knock off those points one by one.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and as always, let me know what you think by commenting below or mentioning me on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calculating timezones in JavaScript</title>
      <link>http://fromanegg.com/post/2013/06/06/calculating-timezones-in-javascript</link>
      <pubDate>Thu, 06 Jun 2013 10:02:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/06/06/calculating-timezones-in-javascript</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m sure most people cringe when they hear that they have been assigned a task which has to do with dates in JavaScript. Because JavaScript is lacking a fully featured date library these tasks are rarely trivial and become even more difficult when you need to support users around the world.&lt;/p&gt;

&lt;h4 id=&#34;converting-a-timestamp-to-utc-time&#34;&gt;Converting a timestamp to UTC time.&lt;/h4&gt;

&lt;p&gt;To display a timestamp in UTC around the world instead of in the users local timezone you use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset&#34;&gt;getTimezoneOffset&lt;/a&gt;, multiply it by 60,000 and then subtract that from your timestamp.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var rd = new Date.getTimezoneOffset()*60000,
    time = new Date((1349797266.032 * 1000) - rd);

console.log(&#39;UTC timestamp is &#39; + time);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;calculating-the-users-timezone&#34;&gt;Calculating the users timezone&lt;/h4&gt;

&lt;p&gt;To calculate the users timezone we need to determine the offset between the current time and the UTC time. To do that we use the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours&#34;&gt;getUTCHours&lt;/a&gt; method and the compare the two dates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var dateATmp = new Date(2013, 0, 1, 0, 0, 0, 0),
    dateA = new Date(2013, 0, 1, dateATmp.getUTCHours(), 0, 0, 0);

console.log(&#39;Your timezone is GMT &#39; + (dateATmp - dateA) / 3600000);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;determining-if-the-user-observes-daylight-savings-time&#34;&gt;Determining if the user observes daylight savings time&lt;/h4&gt;

&lt;p&gt;Calculating if the user observes daylight savings time (DST) is a little long winded but is certainly possible. We need to calculate the timezone difference between January and July. To do that we create the two dates, one in their current timezone and the other in UTC. We then divide the difference by 3600000 to get the hour offset and if they are the same DST is not observed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var dateATmp = new Date(2013, 0, 1, 0, 0, 0, 0),
    dateA = new Date(2013, 0, 1, dateATmp.getUTCHours(), 0, 0, 0),
    dateBTmp = new Date(2013, 6, 1, 0, 0, 0, 0),
    dateB = new Date(2013, 6, 1, dateBTmp.getUTCHours(), 0, 0, 0),
    diffStdTime = (dateATmp - dateA) / 3600000,
    diffDaylightTime = (dateBTmp - dateB) / 3600000,
    dst = (diffStdTime == diffDaylightTime) ? &#39;not&#39;: &#39;&#39;;

console.log(&#39;DST is %s observed here.&#39;, dst);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope that some or all of these solutions help make your life with dates in JavaScript a little easier. If you have any problems, or if you know of a better way to accomplish these tasks please let me know below or by mentioning me on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>XOR in JavaScript</title>
      <link>http://fromanegg.com/post/2013/06/01/xor-in-javascript</link>
      <pubDate>Sat, 01 Jun 2013 12:08:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/06/01/xor-in-javascript</guid>
      <description>&lt;p&gt;Typically when writing a XOR check in JavaScript you would do something like…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (( foo || bar ) &amp;amp;&amp;amp; !( foo &amp;amp;&amp;amp; bar )) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The issue with this approach is that it can be very verbose when not in psudo code or you will have to convert each expression into a boolean value prior to the check to get it as small as the above example.&lt;/p&gt;

&lt;p&gt;In order to start working towards a better solution we first need to define our desired outcome. Wikipedia explains an &lt;a href=&#34;https://en.wikipedia.org/wiki/Exclusive_or&#34;&gt;exclusive or (XOR)&lt;/a&gt; to be a logical operation that outputs true whenever both inputs differ (one is true, the other is false).&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Input A&lt;/th&gt;
&lt;th&gt;Input B&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So with the truth table above we can now check out alternative approaches. As it turns out the quirkyness of JavaScript can actually help us clean this up. Because using the NOT (!) operator on a string will typecast it to false we can actually reduce the above if check to…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (!foo != !bar) { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So lets create an output table for this new technique to see if it works as expected.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Input A&lt;/th&gt;
&lt;th&gt;Input B&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Works great and with a lot less keystrokes!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you have any questions or comments please feel free to comment below or mention me on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Insert an array of values into an array in JavaScript</title>
      <link>http://fromanegg.com/post/2013/02/22/insert-an-array-of-values-into-an-array-in-javascript</link>
      <pubDate>Fri, 22 Feb 2013 12:00:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/02/22/insert-an-array-of-values-into-an-array-in-javascript</guid>
      <description>&lt;p&gt;Yesterday I had an array of objects which needed to be inserted into another array at a specific index point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Array #1
[&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]

// Array #2
[1, 2, 3, 4, 5]

// Desired outcome
[1, 2, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But none of the native array methods allowed me to insert an array of values into an array. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice&#34;&gt;Splice&lt;/a&gt; comes close but it takes a comma delimited list of values, not an array of values. Conveniently however you can still use the native splice function using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&#34;&gt;apply&lt;/a&gt; to achieve the desired result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var arrayOne = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;],
    arrayTwo = [1, 2, 3, 4, 5],
    index = 2;

// We want to push the starting index and the number of values we want
// to delete (in this case 0) onto the beginning of the first array.
arrayOne.unshift(index, 0);

// Next we want to apply the native splice method to arrayOne under
// the context of arrayTwo
Array.prototype.splice.apply(arrayTwo, arrayOne);

// [1, 2, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, 3, 4, 5]
console.log(arrayTwo);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Prototypes and class-like objects in Javascript</title>
      <link>http://fromanegg.com/post/2013/01/21/prototypes-and-class-like-objects-in-javascript</link>
      <pubDate>Mon, 21 Jan 2013 10:00:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/01/21/prototypes-and-class-like-objects-in-javascript</guid>
      <description>&lt;p&gt;Javascript being prototypal means that it can access methods and properties through what is known as the prototype chain. Everything in Javascript is an object, and every object has a special property known as the ‘prototype’. This post is a continuation of my previous post &lt;a href=&#34;http://fromanegg.com/post/39621616853/constructor-chaining-inheritance-in-javascript&#34;&gt;Constructor chaining &amp;amp; inheritance in javascript&lt;/a&gt;. I recommend that you read that post first as I’ll be referencing some of the same code.&lt;/p&gt;

&lt;p&gt;The prototype is defined as an “object that provides shared properties for other objects” - &lt;a href=&#34;http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.5&#34;&gt;Ecma International&lt;/a&gt;. What this means is that, by default, any object that inherits from another object automatically has reference to the parents prototypes all the way through the inheritance tree. When you call a method on an object (remember everything in Javascript is an object) it first looks through the local prototype, if it’s not found, it then continues checking prototypes up until it hits Object.prototype to find that method before throwing an error. To illustrate that lets slightly modify our mustang instance and take a look at the instance in the inspector.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Car() {
    this.color = &amp;quot;red&amp;quot;;
}

Car.prototype.getColor = function() {
   return this.color;
};

var mustang = new Car();
console.log(mustang.getColor()); // Prints `red` to the console
console.log(mustang.toString()); // Prints [object Object] to the console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stepping through this code you’ll see that we create a new constructor function as we did previously but this time we are creating a new getColor method on Car’s prototype that returns the color of the instance of Car. We then create a new instance of Car and log the output of the getColor method to the console. The following line is a perfect example of walking the prototype chain to try and find a toString method. We clearly didn’t create this method so where is it coming from? This is best illustrated using a screenshot of the browser console log of our mustang instance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/prototypes-and-class-like-objects-in-javascript-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;First thing to notice is that we don’t actually have a &lt;code&gt;prototype&lt;/code&gt; property here but &lt;code&gt;__proto__&lt;/code&gt; which is a non-standard label for accessing the prototype of an object. In the prototype of our Car instance we have the getColor method that we created which matches with the above code block. Next, because Car is a function which extends Object, we have the Object prototype which includes, among other things, the toString method that we used.&lt;/p&gt;

&lt;p&gt;It is considered bad practice to overwrite the native method prototypes because other code on the page might be relying on those native prototypes to function properly. So what do you do if you want to use your own toString method? By creating a toString method in the prototype of your instance, Javascript will run into that one first and use it instead of the native method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Car() {
    this.color = &amp;quot;red&amp;quot;;
}

Car.prototype.toString = function() {
   return this.color;
};

var mustang = new Car();
console.log(mustang.toString()); // Prints `red` to the console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So here we create a toString method on the Car prototype to return the color of Car. This time when we call the toString method, Javascript runs into our own toString method first and executes it instead of the native method printing red instead of [object Object]&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/prototypes-and-class-like-objects-in-javascript-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Taking a look at the console log of our mustang object, you can now see the two toString methods and where they are in the prototype chain. Note: Although the console shows &lt;code&gt;__proto__&lt;/code&gt; make sure you don’t access it directly because it’s not available on all platforms, always use &lt;code&gt;prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To do constructor chaining while maintaining the prototype chain requires you to take one more step. If you simply take the lessons from the previous post and this post so far you would assume you could write something like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Baddie() {
  this.level = 1;
}

Baddie.prototype.levelUp = function() {
  this.level++;
};

function Spider() {
  Baddie.apply(this);
}

var spider = new Spider();

spider.levelUp(); // Throws TypeError
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By running the above script you will see that you get an error in the console “Uncaught TypeError: Object # has no method ‘levelUp’ ”. And that is because when you chain constructors in this method you aren’t maintaining reference to the parents prototype. To make this work as you would like you need to add one more line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Baddie() {
  this.level = 1;
}

Baddie.prototype.levelUp = function() {
  this.level++;
};

function Spider() {
  Baddie.apply(this);
}
Spider.prototype = new Baddie(); // Add this line

var spider = new Spider();

spider.levelUp();
console.log(spider.level); // Prints `2` to the console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By assigning the prototype of your new object to a new instance of your parent you maintain the prototype chain giving you access to its methods.&lt;/p&gt;

&lt;p&gt;Combining the above lessons allows you to infinitely chain constructors as we did previously but this time, also maintain the prototypes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Baddie() {
  this.level = 1;
}

Baddie.prototype.levelUp = function() {
  this.level++;
};

function Spider() {
  Baddie.apply(this);
}
Spider.prototype = new Baddie();

Spider.prototype.boost = function() {
  this.level = this.level + 10;
};

function SuperSpider() {
  Spider.apply(this);
}
SuperSpider.prototype = new Spider();

var superSpider = new SuperSpider();

superSpider.levelUp();
console.log(superSpider.level); // Prints `2` to the console
superSpider.boost();
console.log(superSpider.level); // Prints `12` to the console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for reference here is the console output of our superSpider class pointing out the levelUp and boost functions&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/prototypes-and-class-like-objects-in-javascript-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I’m sure you’re thinking that this is pretty convoluted and you would be right. Next time I’ll be showing you an ES5 convenience method to clean this up, as well as some YUI OOP methods which greatly simplify this task as well as handle all of the edge cases. Thanks for reading and if you have any questions or comments you can comment below, or mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;. Till next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YUIConf talk 2012</title>
      <link>http://fromanegg.com/post/2013/01/17/yuiconf-talk-2012</link>
      <pubDate>Thu, 17 Jan 2013 11:07:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/01/17/yuiconf-talk-2012</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3guDNBdxoE8?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;My talk from YUIConf 2012, where I showcase the issues of modern web development that arise when using various libraries and explain how the features of YUI make it a clear leader for development teams of any size. I discuss standard development procedures, modular development and extensibility, API consistency, documentation, and testing. Hope you enjoy, Let me know what you think!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Constructor chaining &amp; inheritance in javascript</title>
      <link>http://fromanegg.com/post/2013/01/03/constructor-chaining--inheritance-in-javascript</link>
      <pubDate>Thu, 03 Jan 2013 20:56:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/01/03/constructor-chaining--inheritance-in-javascript</guid>
      <description>&lt;p&gt;Javascript takes a lot of flack for being prototypal vs class based which leads a lot of developers to incorrectly assume that OOP techniques like constructor chaining and inheritance aren’t possible. This couldn’t be further from the truth; the real issue is that Javascript didn’t used to include any native OOP style methods. Luckily however javascript still provided us enough power to be able to build these methods and techniques ourselves. It gets even easier when you are able to use ES5 Javascript; or for cross browser support use a framework like YUI which adds in the OOP methods missing from Javascript which I’ll be covering in a follow up post.&lt;/p&gt;

&lt;p&gt;The first step is to understand that a constructor in Javascript is simply a function that you call with the word &lt;code&gt;new&lt;/code&gt;. In the following example we are creating a function called Car, creating a color property on each instance of Car with the &lt;code&gt;this&lt;/code&gt; special property, then creating a new instance of that function which is being assigned to the &lt;code&gt;mustang&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Car() {
    this.color = &amp;quot;red&amp;quot;;
}
var mustang = new Car();
console.log(mustang.color); // Prints `red` to the console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; keyword is very important when creating constructors in javascript. Without &lt;code&gt;new&lt;/code&gt; Car will be executed and &lt;code&gt;this&lt;/code&gt; will point to &lt;code&gt;window&lt;/code&gt; creating global variables, and it’s return value will be assigned to mustang. In this case mustang will be undefined and if you try and access any properties on it your script will grind to a halt.&lt;/p&gt;

&lt;p&gt;To be able to chain these constructors we will use one of two Javascript methods; &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&#34;&gt;call()&lt;/a&gt;, or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&#34;&gt;apply()&lt;/a&gt;. These allow us to call another method in javascript but specify the scope to which it executes.&lt;/p&gt;

&lt;p&gt;A common example to illustrate inheritance is creating a character in a video game.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Baddie() {
  // Set up the baddies defaults
  this.level = 1;
  this.hitPoints = 100;
  this.name = &amp;quot;Baddie&amp;quot;;
}

function Spider() {
  // Executing Baddie with it&#39;s context set to Spider
  // because we used `this` it now assigns it&#39;s properties
  // level, hitPoints, and name to the Spider instance.
  Baddie.apply(this);
  this.color = &amp;quot;red&amp;quot;;
  this.legs = 8;
}

var regularSpider = new Spider();

console.log(regularSpider.level); // Prints `1` to the console
console.log(regularSpider.legs); // Prints `8` to the console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So here we have created two constructor functions, Baddie and Spider. The important line here is Baddie.apply(this); which executes Baddie in the context of Spider - adding those properties to the Spider instance. Using this technique you can chain as many constructors together as you like.&lt;/p&gt;

&lt;p&gt;This is great but what if we need to create many different types of Spiders; we need a way to pass data from our instantiation down the stack.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Baddie(config) {
  // Set the baddie defaults using the
  // supplied configuration values or the defaults
  config = config || {};
  this.level = config.level || 1;
  this.hitPoints = config.hitPoints || 100;
  this.name = config.name || &amp;quot;Baddie&amp;quot;;
}

function Spider(config) {
  // This time we pass in a second paramter which
  // is the configuration object, or an empty
  // object if none was supplied
  config = config || {};
  Baddie.apply(this, arguments);
  this.color = config.color || &amp;quot;red&amp;quot;;
  this.legs = config.legs || 8;
}

var regularSpider = new Spider(),
    // Pass a configuration object into the constructor
    superSpider = new Spider({
      level: 10,
      hitPoints: 10000,
      name: &amp;quot;Super Spider&amp;quot;,
      color: &amp;quot;yellow&amp;quot;,
      legs: 16
    });


console.log(regularSpider.level); // Prints `1` to the console
console.log(superSpider.level); // Prints `10` to the console
console.log(regularSpider.color); // Prints `red` to the console
console.log(superSpider.color); // Prints `yellow` to the console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this example we are creating a super spider by passing a configuration object into the Spider constructor. For this to have any effect down the chain we need to add a second parameter to our apply() call. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments&#34;&gt;arguments&lt;/a&gt; is a special variable available in all functions which is an array-like object corresponding to the values passed to a function. This allows us to pass everything that was in the configuration object down to the next constructor.&lt;/p&gt;

&lt;p&gt;If you remember a little earlier I mentioned we could also use the call() function. This function accepts an argument list instead of an array of values. So if you prefer to pass in values in this matter you would use call() instead of apply().&lt;/p&gt;

&lt;p&gt;The last topic I want to touch on in this post is private properties and constructor methods using chained constructors. They are done pretty much exactly how you would assume coming from other languages but I’m going to illustrate the syntax just to drive it home. I have trimmed down the code a bit in this example to highlight the parts related to this topic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Baddie(config) {
  var id = &amp;quot;abc&amp;quot;;

  // Code removed for brevity

  this.getId = function() {
    return id;
  };
  this.setId = function(newVal) {
    id = newVal;
  }
}

function Spider(config) {
  Baddie.apply(this, arguments);
  // Code removed for brevity
}

var spiderOne = new Spider(),
    spiderTwo = new Spider();

console.log(spiderOne.getId()); // Prints `abc` to the console
spiderOne.setId(&#39;123&#39;);
console.log(spiderOne.getId()); // Prints `123` to the console
console.log(spiderTwo.getId()); // Prints `abc` to the console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So as you can see in the Baddie function I created a local variable called &lt;code&gt;id&lt;/code&gt; and assigned it a default value. I also created very basic getter and setter methods so that you can access this variable from outside of the function. Further down in the script I instantiate two completely separate spiders - they even have their own private id variable which is illustrated when I set it to 123 for spiderOne, but spiderTwo is still the default.&lt;/p&gt;

&lt;p&gt;In coming posts I will be covering prototypal inheritance, YUI OOP, and new related Javascript methods but I’ll be sure to link them here. Thanks for reading! If you have any questions or comments you can comment below, or mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;. Till next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Form validation with keydown, keypress, and keyup</title>
      <link>http://fromanegg.com/post/2012/12/29/form-validation-with-keydown-keypress-and-keyup</link>
      <pubDate>Sat, 29 Dec 2012 12:58:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/12/29/form-validation-with-keydown-keypress-and-keyup</guid>
      <description>&lt;p&gt;There is quite a bit of confusion in the beginner JavaScript world as to what the difference is between the keydown, keypress, and keyup events. So I hope that the following can help clear up some of the common questions as well as provide some solutions to make your life easier when dealing with cross browser key events.&lt;/p&gt;

&lt;p&gt;As with all DOM events there is a generally accepted order to which they fire and key events are no different. When the user hits a key, the events are fired in the following sequence; keydown, keypress, keyup.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/keydown&#34;&gt;Keydown&lt;/a&gt;: fired when the key is pressed but before any values have been passed to the DOM. This means that you can prevent the key from being pressed to disable user inputs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&#34;&gt;Keypress&lt;/a&gt;: fired when the key which is being pressed results in a character being sent. So this excludes modifier keys, directional keys, and keys which remove text.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/keyup&#34;&gt;Keyup&lt;/a&gt;: fired after the user has released the key, telling you what key was pressed but because its being fired after the fact you are unable to prevent this event.
The best way to understand these events is an example. Lets say we have a currency input in a form which we want to validate as the user types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we need some rules:
- Maximum value $99999.99
- Cents are not required but available
Note: I am intentionally ignoring the possibility of a user pasting into the field as that’s out of scope of this post.&lt;/p&gt;

&lt;p&gt;Click here to view this simple example on jsbin: &lt;a href=&#34;http://jsbin.com/oposij/1/embed?output&#34;&gt;Simple form validation on user input&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.getElementsByName(&#39;currency-field&#39;)[0],
    currencyRegex = /^[0-9]{0,5}(\.[0-9]{0,2})?$/;

function handleKeypress(e) {
      // Get the string value of the charCode.
  var char = String.fromCharCode(e.charCode),
      target = e.target,
      inputVal = target.value,
      // Construct what the value will be if the event is not prevented.
      value = inputVal.substr(0, target.selectionStart) + char + inputVal.substr(target.selectionEnd);

  // Test to make sure the user is inputting only valid characters
  // and that the resulting input is valid.
  if (!char.match(/[0-9.]/) || !value.match(currencyRegex)) {
    toggleUI(false, target);
  } else {
    toggleUI(true, target);
  }

}

function handleKeyup(e) {
  var target = e.target,
      keyCode = e.keyCode;

  // If the user deletes anything, test the value in the input
  // again to check for validity.
  if (keyCode === 8 || keyCode === 46) {
    if(!target.value.match(currencyRegex)) {
      toggleUI(false, target);
    } else {
      toggleUI(true, target);
    }
  }
}

function toggleUI(valid, target) {
  if (valid === true) {
    target.className = &amp;quot;valid&amp;quot;;
  } else {
    target.className = &amp;quot;warning&amp;quot;;
  }
}

// On keypress or keyup, call their callback
input.onkeypress = handleKeypress;
input.onkeyup = handleKeyup;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example should be fairly straight forward to follow along with but there are a few points of interest that relate to key events.
- First, notice that I am listening on not only keypress but also keyup. This is because keypress does not fire when the user deletes a character but we still need to check the input value to be sure that it’s valid.
- Second, you’ll see that I’m using e.charCode in the keypress handler but using e.keyCode in the keyup handler. This is because I don’t care what key was pressed on keypress, I only care what is being inserted into the input field; however on the keyup, I only care that a delete/backspace key was released but am not concerned about what was entered into the text box.
Ok so now what about keydown? Another example is in order; we’ll take the previous example, but instead of notifying the user that something is wrong, we will prevent them from inputting invalid characters&lt;/p&gt;

&lt;p&gt;Click here to view this simple example on jsbin: &lt;a href=&#34;http://jsbin.com/oposij/2/embed?output&#34;&gt;Prevent invalid input on form&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.getElementsByName(&#39;currency-field&#39;)[0],
    currencyRegex = /^[0-9]{0,5}(\.[0-9]{0,2})?$/;

function handleKeypress(e) {
      // Get the string value of the charCode.
  var char = String.fromCharCode(e.charCode),
      target = e.target,
      inputVal = target.value,
      // Construct what the value will be if the event is not prevented.
      value = inputVal.substr(0, target.selectionStart) + char + inputVal.substr(target.selectionEnd);

  // Test to make sure the user is inputting only valid characters
  // and that the resulting input is valid.
  if (!char.match(/[0-9.]/) || !value.match(currencyRegex)) {
    e.preventDefault();
  }

}

function handleKeydown(e) {
  var target = e.target,
      keyCode = e.keyCode,
      inputVal = target.value,
      value;

  // If the user deletes anything, construct the resulting
  // value to determine validity.
  if (keyCode === 8) {
    value = inputVal.substr(0, target.selectionStart - 1) + inputVal.substr(target.selectionEnd);
  }
  if (keyCode === 46) {
    value = inputVal.substr(0, target.selectionStart) + inputVal.substr(target.selectionEnd + 1);
  }    
  if (value) {
    if(!value.match(currencyRegex)) {
      e.preventDefault();
    }
  }
}

// On keypress or keyup, call their callback
input.onkeypress = handleKeypress;
input.onkeydown = handleKeydown;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see by this last example that by using keydown we can listen for the delete or backspace key, check the resulting input value, and if it’s invalid, prevent the user action.&lt;/p&gt;

&lt;p&gt;As with anything front end related there are going to be cross browser differences so I highly recommend using one of the quality javascript libraries and frameworks available to normalize these differences for you. If you have read any of my other posts you have probably guessed that I’m partial to the &lt;a href=&#34;http://yuilibrary.com/&#34;&gt;YUI framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope that these examples not only show you how keyup, keydown, and keypress function; but also give you some ideas on the best situations to use them. If you have any questions feel free to comment below or mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using after() event listeners to react to attribute value changes</title>
      <link>http://fromanegg.com/post/2012/12/01/using-after-event-listeners-to-react-to-attribute-value-changes</link>
      <pubDate>Sat, 01 Dec 2012 18:30:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/12/01/using-after-event-listeners-to-react-to-attribute-value-changes</guid>
      <description>&lt;p&gt;If you have written anything using events in YUI you know that you have a few ways to listen to a single event on a target, two of the most popular are the &lt;a href=&#34;http://yuilibrary.com/yui/docs/api/classes/EventTarget.html#method_on&#34;&gt;on()&lt;/a&gt; and &lt;a href=&#34;http://yuilibrary.com/yui/docs/api/classes/EventTarget.html#method_after&#34;&gt;after()&lt;/a&gt; methods. Essentially the on() method allows you to listen to the event before the after() listeners are given a chance to react to it and after() allows you to listen after the on() callbacks have had a chance to execute.&lt;/p&gt;

&lt;p&gt;If you use on() to listen for the attribute change event you will be notified every time something attempts to set the value of that attribute. If you use after() your callback will only be executed if the value set was successful. What this means is that if something else was listening using on() decided to prevent the change event your after() callback would never fire.&lt;/p&gt;

&lt;p&gt;A useful side effect of this is that the after() callback will not fire if the value being set is identical to the one currently in the attribute. This means that if you have a situation where an attribute may be set multiple times but you only care when it changes - by simply switching to listening via the after() method your callback will only execute when the values differ. Saving you the code in the callback to check the values and the function call which now is only called when required.&lt;/p&gt;

&lt;p&gt;Click here to view this simple example on &lt;a href=&#34;http://jsbin.com/ihikih/1/embed?output&#34;&gt;jsbin: Using after() event listeners to react to attribute value changes&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;YUI().use(&#39;node&#39;, &#39;base-build&#39;, function(Y) {

  var body = Y.one(&#39;body&#39;);
  var Foo = Y.Base.create(&#39;foo&#39;, Y.Base, [], {

    initializer: function() {
      this.on(&#39;barChange&#39;, function(e) {
        body.append(&#39;change attempted&#39;);                                  
      });

      this.after(&#39;barChange&#39;, function(e) {
        body.append(&#39;change successful&#39;);
      });

      body.append(&amp;quot;---&amp;gt; Setting bar to &#39;cupcake&#39;&amp;quot;);
      this.set(&#39;bar&#39;, &#39;cupcake&#39;);

      body.append(&amp;quot;---&amp;gt; Setting bar to &#39;cupcake&#39; again&amp;quot;);
      this.set(&#39;bar&#39;, &#39;cupcake&#39;);

      body.append(&amp;quot;---&amp;gt; Setting bar to &#39;pie&#39;&amp;quot;);
      this.set(&#39;bar&#39;, &#39;pie&#39;);
    }

  }, {

    ATTRS: {

      bar: {
        value: &#39;baz&#39;
      }

    }

  });
  new Foo();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks for reading, and if you have any questions feel free to comment below, mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; or pop into #yui on irc.freenode.net&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding a validation fail event to YUI’s Y.Attribute</title>
      <link>http://fromanegg.com/post/2012/08/24/adding-a-validation-fail-event-to-yuis-y.attribute</link>
      <pubDate>Fri, 24 Aug 2012 13:41:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/08/24/adding-a-validation-fail-event-to-yuis-y.attribute</guid>
      <description>&lt;p&gt;One of the first things that a YUI developer learns about are the attribute change events that are fired any time an attribute value is successfully changed. But one often overlooked feature of &lt;a href=&#34;http://yuilibrary.com/yui/docs/attribute/&#34;&gt;Y.Attribute&lt;/a&gt; is the validator.&lt;/p&gt;

&lt;p&gt;The validator allows you to test that a value is valid for the attribute prior to it being sent to the setter. A common use is validating that the value trying to be set is in an accepted format - such as only allowing integers in a quantity attribute. Returning true from the validator sends the value to the setter, returning false causes the value to not be set. But unlike a successful change event no event is fired to notify you that the value failed validation and was not set. So lets augment our modules to fire a validation failed event.&lt;/p&gt;

&lt;p&gt;Unfortunately to &lt;a href=&#34;https://en.wikipedia.org/wiki/Monkey_patch&#34;&gt;monkey patch&lt;/a&gt; this feature into Y.Attribute properly would require a large amount of code duplication so we’ll leave that to the coming pull request. Instead we are going to pick a small simple method which will allow us to inject our enhancement but not force us to duplicate a bunch of the library code. This is only intended to be a short term solution until the patch makes its way into the library as monkey patching introduces a number of potential negative side effects.&lt;/p&gt;

&lt;p&gt;Because we may not want to apply this patch to all of the modules which extend Y.Attribute we will only modify this method in the objects that we need it for. To make this really easy we will create a small object and mix it into the instances.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Y.attrValidatePatch = function() {};

Y.attrValidatePatch.prototype = {
    _defAttrChangeFn: function(e) {
        if (!this._setAttrVal(e.attrName, e.subAttrName, e.prevVal, e.newVal)) {
            e.stopImmediatePropagation();
            this.fire(e.attrName+&#39;ValidationFail&#39;, e); // The only new line
        } else {
            e.newVal = this.get(e.attrName);
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then mix that patch into our new module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CustomModule = Y.Base.create(&#39;custom-module&#39;, Y.Base, [Y.attrValidatePatch], {

    //Custom  module code here

}, {
    ATTRS: {
        &amp;quot;number&amp;quot;: {
            validator: function(val) {
                return Y.Lang.isNumber(val);
            }
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we are able to listen for that attributes validation fail event just like we would for the change event&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var MyModule = new CustomModule();

MyModule.on(&#39;numberValidationFail&#39;, function(e) {
    Y.log(&#39;Validation failed setting &#39; + e.attrName + &#39; to &#39; + e.newVal, &#39;error&#39;, MyModule.name);
});

// As usual you need to listen using &#39;after&#39; to be sure attributes were set
MyModule.after(&#39;numberChange&#39;, function(e) { Y.log(&#39;New value is: &#39; + e.newVal); });

MyModule.set(&#39;number&#39;, 100); // Valid value
MyModule.set(&#39;number&#39;, &#39;to string&#39;); //Invalid value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wrap all of the above code up in a use() and watch your console to see it in action. As usual If you are having any issues implementing this patch feel free to comment below, mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; or pop into #yui on irc.freenode.net&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add toggle button support to Y.PopupCalendar</title>
      <link>http://fromanegg.com/post/2012/07/31/add-toggle-button-support-to-y.popupcalendar</link>
      <pubDate>Tue, 31 Jul 2012 15:57:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/07/31/add-toggle-button-support-to-y.popupcalendar</guid>
      <description>&lt;p&gt;A commonly requested feature for the popup calendar is to be able to pop it open via a button. Unfortunately I haven’t had time to add this feature directly into the module but today @gdanko popped into #yui on irc.freenode.net and was willing to help test the small code changes required to make sure that this would work.&lt;/p&gt;

&lt;p&gt;Until I am able to add support into the module, simply copy and paste the following code before the first instance of &lt;a href=&#34;http://yuilibrary.com/gallery-archive/gallery/show/popup-calendar.html?&#34;&gt;Y.PopupCalendar&lt;/a&gt; or &lt;a href=&#34;http://yuilibrary.com/gallery-archive/gallery/show/popup-calendar-group.html?&#34;&gt;Y.PopupCalendarGroup&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Y.PopupCalendar.prototype._bindEvents = function() {
  Y.log(&#39;_bindEvents&#39;, &#39;info&#39;, this.name);

  var input = this.get(&#39;input&#39;);

  if (input.get(&#39;type&#39;) === &#39;text&#39;) {
      input.on(&#39;focus&#39;, this.showCalendar, this);
  } else {
      input.on(&#39;click&#39;, this.showCalendar, this);
  }

  input.on(&#39;keydown&#39;, this.testKey, this);
  this.on(&#39;selectionChange&#39;, this._emitDate, this);
  this.after(&#39;autoFocusOnFieldFocusChange&#39;, this.setHideOn, this);
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it. You can now supply most elements to show the calendar. If you are having any issues implementing this patch feel free to comment below, mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; or pop into #yui on irc.freenode.net&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to make a Node.js static file server - Part 1</title>
      <link>http://fromanegg.com/post/2012/02/26/how-to-make-a-node.js-static-file-server---part-1</link>
      <pubDate>Sun, 26 Feb 2012 19:19:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/02/26/how-to-make-a-node.js-static-file-server---part-1</guid>
      <description>

&lt;p&gt;This multi-part series will take you through everything from how to get a basic Node.js static file server going, to different way’s to deliver the content to the user, common pitfalls, caching, and when to use Node.js to serve files vs other solutions.&lt;/p&gt;

&lt;p&gt;I’m going to assume you already have Node.js up running on your computer and that you know javascript. This code was developed on v0.6.1-pre and I will make an effort to update it and the version number as things change with Node.js.&lt;/p&gt;

&lt;p&gt;First thing your going to do is create a new file which will house our server code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few native Node.js modules that we’ll need and a few more will be added as this series continues.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var http = require(&#39;http&#39;),
    path = require(&#39;path&#39;),
    fs = require(&#39;fs&#39;),
    util = require(&#39;util&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are pulling in the following modules:
- &lt;a href=&#34;https://nodejs.org/docs/latest/api/http.html&#34;&gt;HTTP&lt;/a&gt;: Low level API that handles the parsing of streams and handling of the HTTP messages.
- &lt;a href=&#34;https://nodejs.org/docs/latest/api/path.html&#34;&gt;Path&lt;/a&gt;: A string manipulation library, also allows you to check the file system for the existence of a file.
- &lt;a href=&#34;https://nodejs.org/docs/latest/api/fs.html&#34;&gt;File System&lt;/a&gt;: Provides simple wrappers around standard POSIX functions for file IO.
- &lt;a href=&#34;https://nodejs.org/docs/latest/api/util.html&#34;&gt;Utilities&lt;/a&gt;: Extra utility features.&lt;/p&gt;

&lt;h3 id=&#34;create-the-server&#34;&gt;Create the server&lt;/h3&gt;

&lt;p&gt;Within the scope of this part of the tutorial we only need to access the HTTP module once for its &lt;a href=&#34;https://nodejs.org/docs/latest/api/http.html#http.createServer&#34;&gt;createServer()&lt;/a&gt; method. We create a HTTP server which calls the &lt;code&gt;_handler&lt;/code&gt; callback when a &lt;a href=&#34;https://nodejs.org/docs/latest/api/http.html#event_request_&#34;&gt;request event&lt;/a&gt; is made and start listening on a specified port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;http.createServer(_handler).listen(3000);
console.log(&#39;Server running at http://127.0.0.1:3000/&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now set up the request handler which will house all of the code that handles each and every request that comes into your server. We’ll also define some variables which we’ll use later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function _handler(req, res) {
    var root = &amp;quot;..&amp;quot;,
        url = &amp;quot;&amp;quot;,
        contentType = &amp;quot;text/plain&amp;quot;,
        filePath = &amp;quot;&amp;quot;;

        //All following code goes here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because this is strictly a file server we only want to support the GET method and reject any other requests. To do this we need to reference the request object passed to our callback, an instance of &lt;a href=&#34;https://nodejs.org/docs/latest/api/http.html#http.ServerRequest&#34;&gt;http.ServerRequest&lt;/a&gt; stored in &lt;code&gt;req&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (req.method !== &#39;GET&#39;) { //If the request method doesn&#39;t equal &#39;GET&#39;
    res.writeHead(405); //Write the HTTP status to the response head
    res.end(&#39;Unsupported request method&#39;, &#39;utf8&#39;); //End and send the response
    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On most web servers when you send a request to the server without a file you will get some type of default file usually the index.html. Because this is a file server, if they aren’t requesting a file, they are going to get an error. After we determine that they are requesting a file we do simple string concatenation to build the file path and then pass it to the &lt;a href=&#34;https://nodejs.org/docs/latest/api/path.html#path.exists&#34;&gt;path.exists()&lt;/a&gt; method. This method will test the file path for existence and then pass that information to the callback, &lt;code&gt;serveRequestedFile&lt;/code&gt; in this case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (&#39;.&#39; + req.url !== &#39;./&#39;) {
    filePath = root + req.url;
    path.exists(filePath, serveRequestedFile);		
} else {
    res.writeHead(400);
    res.end(&#39;A file must be requested&#39;, &#39;utf8&#39;);
    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stream your files&lt;/p&gt;

&lt;p&gt;Now that we have set up the http server, verified that they are using the correct method, and that they are requesting a file, we need to serve that file to them. To do this we will use our previously mentioned &lt;code&gt;serveRequestedFile()&lt;/code&gt; function which will receive the status of our file inquiry which we need to test before proceeding.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function serveRequestedFile(file) {
    if (file === false) {
        res.writeHead(404);
        res.end();
        return;
    }

    //Following code will go here

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we aren’t implementing any caching mechanism yet we don’t want to read the whole file into memory before serving. To get around that we use the File System’s &lt;a href=&#34;https://nodejs.org/docs/latest/api/fs.html#fs.createReadStream&#34;&gt;fs.createReadStrem()&lt;/a&gt; method. This method returns a &lt;a href=&#34;https://nodejs.org/docs/latest/api/streams.html#readable_Stream&#34;&gt;Readable Stream&lt;/a&gt; which emits a number of events. We will set up an error event handler in the event there is a server error and the file cannot be served to the user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var stream = fs.createReadStream(filePath);

stream.on(&#39;error&#39;, function(error) {
    res.writeHead(500);
    res.end();
    return;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we send the data to the user we should set the files mime type. For simplicity sake I have included the mime object within the function itself. On a true file server you would likely import a much larger mime list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var mimeTypes = {
    &#39;.js&#39; : &#39;text/javascript&#39;,
    &#39;.css&#39; : &#39;text/css&#39;,
    &#39;.gif&#39; : &#39;image/gif&#39;
}

contentType = mimeTypes[path.extname(filePath)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have now verified that the file exists, created a stream instance for the file in question, set up basic error handling, and found the files mime type. The only thing left is to actually send the file to the user. We first set the content type and the status in he header then use Utilities &lt;a href=&#34;https://nodejs.org/docs/latest/api/util.html#util.pump&#34;&gt;util.pump()&lt;/a&gt; method to push the previously initiated stream to the user. The pump method reads the data from the readable stream &lt;code&gt;stream&lt;/code&gt; and sends it to the writable stream &lt;code&gt;res&lt;/code&gt;. If there is an error in this process or the stream is closed the third arugment, the callback, is called.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;res.setHeader(&#39;Content-Type&#39;, contentType);
res.writeHead(200);

util.pump(stream, res, function(error) {
    //Only called when the res is closed or an error occurs
    res.end();
    return;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start the server and start serving files!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope you enjoyed the first part of this series and were able to get your own file server up and running. I have included a &lt;a href=&#34;https://gist.github.com/hatched/1920353&#34;&gt;working example&lt;/a&gt; of the above code if you want to see it in its entirety. If you need further help feel free to comment below, mention me on &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;twitter&lt;/a&gt;, or join #Node.js on irc.freenode.net.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>