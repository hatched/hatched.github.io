<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>From An Egg</title>
    <link>http://fromanegg.com/tags/yui/index.xml</link>
    <description>Recent content on From An Egg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://fromanegg.com/tags/yui/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>YUI in the Wild</title>
      <link>http://fromanegg.com/post/2013/12/05/yui-in-the-wild</link>
      <pubDate>Thu, 05 Dec 2013 22:57:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/12/05/yui-in-the-wild</guid>
      <description>&lt;p&gt;Earlier today I talked with some of the YUI team about the Juju GUI and how we use YUI for the first ‘YUI in the wild&amp;rsquo;﻿.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lJPdH8xmOWg?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The links I mentioned in the video:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju GUI Demo Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Juju GUI Bazaar repository&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/juju/juju-gui&#34;&gt;Juju GUI Git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>YUIConf talk 2012</title>
      <link>http://fromanegg.com/post/2013/01/17/yuiconf-talk-2012</link>
      <pubDate>Thu, 17 Jan 2013 11:07:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/01/17/yuiconf-talk-2012</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3guDNBdxoE8?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;My talk from YUIConf 2012, where I showcase the issues of modern web development that arise when using various libraries and explain how the features of YUI make it a clear leader for development teams of any size. I discuss standard development procedures, modular development and extensibility, API consistency, documentation, and testing. Hope you enjoy, Let me know what you think!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Form validation with keydown, keypress, and keyup</title>
      <link>http://fromanegg.com/post/2012/12/29/form-validation-with-keydown-keypress-and-keyup</link>
      <pubDate>Sat, 29 Dec 2012 12:58:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/12/29/form-validation-with-keydown-keypress-and-keyup</guid>
      <description>&lt;p&gt;There is quite a bit of confusion in the beginner JavaScript world as to what the difference is between the keydown, keypress, and keyup events. So I hope that the following can help clear up some of the common questions as well as provide some solutions to make your life easier when dealing with cross browser key events.&lt;/p&gt;

&lt;p&gt;As with all DOM events there is a generally accepted order to which they fire and key events are no different. When the user hits a key, the events are fired in the following sequence; keydown, keypress, keyup.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/keydown&#34;&gt;Keydown&lt;/a&gt;: fired when the key is pressed but before any values have been passed to the DOM. This means that you can prevent the key from being pressed to disable user inputs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&#34;&gt;Keypress&lt;/a&gt;: fired when the key which is being pressed results in a character being sent. So this excludes modifier keys, directional keys, and keys which remove text.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/keyup&#34;&gt;Keyup&lt;/a&gt;: fired after the user has released the key, telling you what key was pressed but because its being fired after the fact you are unable to prevent this event.
The best way to understand these events is an example. Lets say we have a currency input in a form which we want to validate as the user types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we need some rules:
- Maximum value $99999.99
- Cents are not required but available
Note: I am intentionally ignoring the possibility of a user pasting into the field as that’s out of scope of this post.&lt;/p&gt;

&lt;p&gt;Click here to view this simple example on jsbin: &lt;a href=&#34;http://jsbin.com/oposij/1/embed?output&#34;&gt;Simple form validation on user input&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.getElementsByName(&#39;currency-field&#39;)[0],
    currencyRegex = /^[0-9]{0,5}(\.[0-9]{0,2})?$/;

function handleKeypress(e) {
      // Get the string value of the charCode.
  var char = String.fromCharCode(e.charCode),
      target = e.target,
      inputVal = target.value,
      // Construct what the value will be if the event is not prevented.
      value = inputVal.substr(0, target.selectionStart) + char + inputVal.substr(target.selectionEnd);

  // Test to make sure the user is inputting only valid characters
  // and that the resulting input is valid.
  if (!char.match(/[0-9.]/) || !value.match(currencyRegex)) {
    toggleUI(false, target);
  } else {
    toggleUI(true, target);
  }

}

function handleKeyup(e) {
  var target = e.target,
      keyCode = e.keyCode;

  // If the user deletes anything, test the value in the input
  // again to check for validity.
  if (keyCode === 8 || keyCode === 46) {
    if(!target.value.match(currencyRegex)) {
      toggleUI(false, target);
    } else {
      toggleUI(true, target);
    }
  }
}

function toggleUI(valid, target) {
  if (valid === true) {
    target.className = &amp;quot;valid&amp;quot;;
  } else {
    target.className = &amp;quot;warning&amp;quot;;
  }
}

// On keypress or keyup, call their callback
input.onkeypress = handleKeypress;
input.onkeyup = handleKeyup;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example should be fairly straight forward to follow along with but there are a few points of interest that relate to key events.
- First, notice that I am listening on not only keypress but also keyup. This is because keypress does not fire when the user deletes a character but we still need to check the input value to be sure that it’s valid.
- Second, you’ll see that I’m using e.charCode in the keypress handler but using e.keyCode in the keyup handler. This is because I don’t care what key was pressed on keypress, I only care what is being inserted into the input field; however on the keyup, I only care that a delete/backspace key was released but am not concerned about what was entered into the text box.
Ok so now what about keydown? Another example is in order; we’ll take the previous example, but instead of notifying the user that something is wrong, we will prevent them from inputting invalid characters&lt;/p&gt;

&lt;p&gt;Click here to view this simple example on jsbin: &lt;a href=&#34;http://jsbin.com/oposij/2/embed?output&#34;&gt;Prevent invalid input on form&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.getElementsByName(&#39;currency-field&#39;)[0],
    currencyRegex = /^[0-9]{0,5}(\.[0-9]{0,2})?$/;

function handleKeypress(e) {
      // Get the string value of the charCode.
  var char = String.fromCharCode(e.charCode),
      target = e.target,
      inputVal = target.value,
      // Construct what the value will be if the event is not prevented.
      value = inputVal.substr(0, target.selectionStart) + char + inputVal.substr(target.selectionEnd);

  // Test to make sure the user is inputting only valid characters
  // and that the resulting input is valid.
  if (!char.match(/[0-9.]/) || !value.match(currencyRegex)) {
    e.preventDefault();
  }

}

function handleKeydown(e) {
  var target = e.target,
      keyCode = e.keyCode,
      inputVal = target.value,
      value;

  // If the user deletes anything, construct the resulting
  // value to determine validity.
  if (keyCode === 8) {
    value = inputVal.substr(0, target.selectionStart - 1) + inputVal.substr(target.selectionEnd);
  }
  if (keyCode === 46) {
    value = inputVal.substr(0, target.selectionStart) + inputVal.substr(target.selectionEnd + 1);
  }    
  if (value) {
    if(!value.match(currencyRegex)) {
      e.preventDefault();
    }
  }
}

// On keypress or keyup, call their callback
input.onkeypress = handleKeypress;
input.onkeydown = handleKeydown;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see by this last example that by using keydown we can listen for the delete or backspace key, check the resulting input value, and if it’s invalid, prevent the user action.&lt;/p&gt;

&lt;p&gt;As with anything front end related there are going to be cross browser differences so I highly recommend using one of the quality javascript libraries and frameworks available to normalize these differences for you. If you have read any of my other posts you have probably guessed that I’m partial to the &lt;a href=&#34;http://yuilibrary.com/&#34;&gt;YUI framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope that these examples not only show you how keyup, keydown, and keypress function; but also give you some ideas on the best situations to use them. If you have any questions feel free to comment below or mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using after() event listeners to react to attribute value changes</title>
      <link>http://fromanegg.com/post/2012/12/01/using-after-event-listeners-to-react-to-attribute-value-changes</link>
      <pubDate>Sat, 01 Dec 2012 18:30:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/12/01/using-after-event-listeners-to-react-to-attribute-value-changes</guid>
      <description>&lt;p&gt;If you have written anything using events in YUI you know that you have a few ways to listen to a single event on a target, two of the most popular are the &lt;a href=&#34;http://yuilibrary.com/yui/docs/api/classes/EventTarget.html#method_on&#34;&gt;on()&lt;/a&gt; and &lt;a href=&#34;http://yuilibrary.com/yui/docs/api/classes/EventTarget.html#method_after&#34;&gt;after()&lt;/a&gt; methods. Essentially the on() method allows you to listen to the event before the after() listeners are given a chance to react to it and after() allows you to listen after the on() callbacks have had a chance to execute.&lt;/p&gt;

&lt;p&gt;If you use on() to listen for the attribute change event you will be notified every time something attempts to set the value of that attribute. If you use after() your callback will only be executed if the value set was successful. What this means is that if something else was listening using on() decided to prevent the change event your after() callback would never fire.&lt;/p&gt;

&lt;p&gt;A useful side effect of this is that the after() callback will not fire if the value being set is identical to the one currently in the attribute. This means that if you have a situation where an attribute may be set multiple times but you only care when it changes - by simply switching to listening via the after() method your callback will only execute when the values differ. Saving you the code in the callback to check the values and the function call which now is only called when required.&lt;/p&gt;

&lt;p&gt;Click here to view this simple example on &lt;a href=&#34;http://jsbin.com/ihikih/1/embed?output&#34;&gt;jsbin: Using after() event listeners to react to attribute value changes&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;YUI().use(&#39;node&#39;, &#39;base-build&#39;, function(Y) {

  var body = Y.one(&#39;body&#39;);
  var Foo = Y.Base.create(&#39;foo&#39;, Y.Base, [], {

    initializer: function() {
      this.on(&#39;barChange&#39;, function(e) {
        body.append(&#39;change attempted&#39;);                                  
      });

      this.after(&#39;barChange&#39;, function(e) {
        body.append(&#39;change successful&#39;);
      });

      body.append(&amp;quot;---&amp;gt; Setting bar to &#39;cupcake&#39;&amp;quot;);
      this.set(&#39;bar&#39;, &#39;cupcake&#39;);

      body.append(&amp;quot;---&amp;gt; Setting bar to &#39;cupcake&#39; again&amp;quot;);
      this.set(&#39;bar&#39;, &#39;cupcake&#39;);

      body.append(&amp;quot;---&amp;gt; Setting bar to &#39;pie&#39;&amp;quot;);
      this.set(&#39;bar&#39;, &#39;pie&#39;);
    }

  }, {

    ATTRS: {

      bar: {
        value: &#39;baz&#39;
      }

    }

  });
  new Foo();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks for reading, and if you have any questions feel free to comment below, mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; or pop into #yui on irc.freenode.net&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Great YUI 3 DataTable resources!</title>
      <link>http://fromanegg.com/post/2012/09/19/great-yui-3-datatable-resources</link>
      <pubDate>Wed, 19 Sep 2012 18:05:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/09/19/great-yui-3-datatable-resources</guid>
      <description>&lt;p&gt;It’s rare that those tasked with displaying tabular data have an easy go of it. Usually the data isn’t in the right format, the standard libraries either do too much or too little, and the styles are never quite right. For the developers using YUI 3 and the YUI 3 DataTable I have included a couple resources below which will surely make your lives a lot easier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yuilibrary.com/yui/docs/datatable/&#34;&gt;YUI 3 DataTable documentation&lt;/a&gt; : Extensive documentation outlining the core features of DataTable.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yuilibrary.com/yui/docs/api/modules/datatable.html&#34;&gt;YUI 3 DataTable API&lt;/a&gt; : Every public, protected, and private method, property, and attribute is listed here.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yuilibrary.com/gallery-archive/gallery/tag/datatable.html?&#34;&gt;Gallery modules&lt;/a&gt; The list of YUI Gallery modules tagged with &lt;code&gt;datatable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.blunderalong.com/&#34;&gt;Blunderalong&lt;/a&gt; : Active community member (#yui on irc.freenode.net) t_smith has spent many hours putting together this amazing list of working examples complete with easy to read code for common roadblocks developers run into.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/responsive-data-tables/&#34;&gt;CSS-Tricks&lt;/a&gt;: Responsive Data Tables : A few great examples of responsive tables.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table&#34;&gt;MDN table documentation&lt;/a&gt; : Easy to read documentation on the core HTML table tag.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/CSS2/tables.html&#34;&gt;W3 table documentation&lt;/a&gt; : Everything there is to know about the html table tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you found these links helpful or would like to see this list grow leave a comment below, mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; or pop into #yui on irc.freenode.net.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding a validation fail event to YUI’s Y.Attribute</title>
      <link>http://fromanegg.com/post/2012/08/24/adding-a-validation-fail-event-to-yuis-y.attribute</link>
      <pubDate>Fri, 24 Aug 2012 13:41:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/08/24/adding-a-validation-fail-event-to-yuis-y.attribute</guid>
      <description>&lt;p&gt;One of the first things that a YUI developer learns about are the attribute change events that are fired any time an attribute value is successfully changed. But one often overlooked feature of &lt;a href=&#34;http://yuilibrary.com/yui/docs/attribute/&#34;&gt;Y.Attribute&lt;/a&gt; is the validator.&lt;/p&gt;

&lt;p&gt;The validator allows you to test that a value is valid for the attribute prior to it being sent to the setter. A common use is validating that the value trying to be set is in an accepted format - such as only allowing integers in a quantity attribute. Returning true from the validator sends the value to the setter, returning false causes the value to not be set. But unlike a successful change event no event is fired to notify you that the value failed validation and was not set. So lets augment our modules to fire a validation failed event.&lt;/p&gt;

&lt;p&gt;Unfortunately to &lt;a href=&#34;https://en.wikipedia.org/wiki/Monkey_patch&#34;&gt;monkey patch&lt;/a&gt; this feature into Y.Attribute properly would require a large amount of code duplication so we’ll leave that to the coming pull request. Instead we are going to pick a small simple method which will allow us to inject our enhancement but not force us to duplicate a bunch of the library code. This is only intended to be a short term solution until the patch makes its way into the library as monkey patching introduces a number of potential negative side effects.&lt;/p&gt;

&lt;p&gt;Because we may not want to apply this patch to all of the modules which extend Y.Attribute we will only modify this method in the objects that we need it for. To make this really easy we will create a small object and mix it into the instances.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Y.attrValidatePatch = function() {};

Y.attrValidatePatch.prototype = {
    _defAttrChangeFn: function(e) {
        if (!this._setAttrVal(e.attrName, e.subAttrName, e.prevVal, e.newVal)) {
            e.stopImmediatePropagation();
            this.fire(e.attrName+&#39;ValidationFail&#39;, e); // The only new line
        } else {
            e.newVal = this.get(e.attrName);
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then mix that patch into our new module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var CustomModule = Y.Base.create(&#39;custom-module&#39;, Y.Base, [Y.attrValidatePatch], {

    //Custom  module code here

}, {
    ATTRS: {
        &amp;quot;number&amp;quot;: {
            validator: function(val) {
                return Y.Lang.isNumber(val);
            }
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we are able to listen for that attributes validation fail event just like we would for the change event&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var MyModule = new CustomModule();

MyModule.on(&#39;numberValidationFail&#39;, function(e) {
    Y.log(&#39;Validation failed setting &#39; + e.attrName + &#39; to &#39; + e.newVal, &#39;error&#39;, MyModule.name);
});

// As usual you need to listen using &#39;after&#39; to be sure attributes were set
MyModule.after(&#39;numberChange&#39;, function(e) { Y.log(&#39;New value is: &#39; + e.newVal); });

MyModule.set(&#39;number&#39;, 100); // Valid value
MyModule.set(&#39;number&#39;, &#39;to string&#39;); //Invalid value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wrap all of the above code up in a use() and watch your console to see it in action. As usual If you are having any issues implementing this patch feel free to comment below, mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; or pop into #yui on irc.freenode.net&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add toggle button support to Y.PopupCalendar</title>
      <link>http://fromanegg.com/post/2012/07/31/add-toggle-button-support-to-y.popupcalendar</link>
      <pubDate>Tue, 31 Jul 2012 15:57:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/07/31/add-toggle-button-support-to-y.popupcalendar</guid>
      <description>&lt;p&gt;A commonly requested feature for the popup calendar is to be able to pop it open via a button. Unfortunately I haven’t had time to add this feature directly into the module but today @gdanko popped into #yui on irc.freenode.net and was willing to help test the small code changes required to make sure that this would work.&lt;/p&gt;

&lt;p&gt;Until I am able to add support into the module, simply copy and paste the following code before the first instance of &lt;a href=&#34;http://yuilibrary.com/gallery-archive/gallery/show/popup-calendar.html?&#34;&gt;Y.PopupCalendar&lt;/a&gt; or &lt;a href=&#34;http://yuilibrary.com/gallery-archive/gallery/show/popup-calendar-group.html?&#34;&gt;Y.PopupCalendarGroup&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Y.PopupCalendar.prototype._bindEvents = function() {
  Y.log(&#39;_bindEvents&#39;, &#39;info&#39;, this.name);

  var input = this.get(&#39;input&#39;);

  if (input.get(&#39;type&#39;) === &#39;text&#39;) {
      input.on(&#39;focus&#39;, this.showCalendar, this);
  } else {
      input.on(&#39;click&#39;, this.showCalendar, this);
  }

  input.on(&#39;keydown&#39;, this.testKey, this);
  this.on(&#39;selectionChange&#39;, this._emitDate, this);
  this.after(&#39;autoFocusOnFieldFocusChange&#39;, this.setHideOn, this);
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it. You can now supply most elements to show the calendar. If you are having any issues implementing this patch feel free to comment below, mention me &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; or pop into #yui on irc.freenode.net&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Loading YUI from Yahoo!’s CDN for PhoneGap (Cordova)</title>
      <link>http://fromanegg.com/post/2012/07/01/loading-yui-from-yahoos-cdn-for-phonegap-cordova</link>
      <pubDate>Sun, 01 Jul 2012 13:34:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/07/01/loading-yui-from-yahoos-cdn-for-phonegap-cordova</guid>
      <description>&lt;p&gt;Loading YUI from Yahoo!’s CDN was one of the most requested features after the previous post &lt;a href=&#34;http://fromanegg.com/post/24952800088/guide-to-using-yui-with-phonegap-cordova&#34;&gt;Guide to using YUI with PhoneGap (Cordova)&lt;/a&gt;. The good news is that it’s very easy to setup but does come with a few drawbacks.&lt;/p&gt;

&lt;p&gt;Using the code from the previous post we only need to make minor changes to load from the CDN.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;My First Cordova YUI App&amp;lt;/title&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;cordova-1.8.0.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- Add in the YUI seed file --&amp;gt;
&amp;lt;script src=&amp;quot;http://yui.yahooapis.com/3.5.1/build/yui/yui-min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- Remove the included local scripts and YUI_CONFIG object
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;yui-file-1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;yui-file-2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;YUI_CONFIG = { bootstrap: false };&amp;lt;/script&amp;gt;--&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h1&amp;gt;YUI PhoneGap (Cordova) Example&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Click this button for a surprise&amp;lt;/p&amp;gt;
&amp;lt;button&amp;gt;Click Me&amp;lt;/button&amp;gt;

&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
// Remove the &#39;load all&#39; flag from the use statement
// YUI().use(&#39;*&#39;, function(Y) {
// Request the Node and Event modules
YUI().use(&#39;node&#39;, &#39;event&#39;, function(Y) {

	var button = Y.one(&#39;button&#39;),
		header = Y.one(&#39;h1&#39;);

	button.on(&#39;touchstart&#39;, function(e) {
		header.setStyle(&#39;color&#39;, &#39;#00B2EE&#39;);
	});

});
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s it! That will load the YUI seed and loader from Yahoo!’s CDN then load in the Node, Event, and all dependent modules automatically for you. Isn’t loader great?&lt;/p&gt;

&lt;p&gt;But all isn’t perfect, at the beginning I mentioned some drawbacks. In the previous version we were packaging up all of the required assets into the package which will be stored on the device. This will guarantee that those files are always available regardless of the users network connection. Using the remote loading method, once the application loads up it needs to make the request of the remote files before it will become functional. This can cause unnecessary delays in the bootup of the application or cause the application to be entirely useless if there is no network connection. Because of that I don’t recommend using remote loading for core application components. This technique can be very useful during development where your required modules may be changing frequently.&lt;/p&gt;

&lt;p&gt;I’m going to try to keep making these tutorials so if you have anything specific you would find helpful for yourself or others please comment below, mention me on &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;twitter&lt;/a&gt; or join #yui on irc.freenode.net&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Guide to using YUI with PhoneGap (Cordova)</title>
      <link>http://fromanegg.com/post/2012/06/12/guide-to-using-yui-with-phonegap-cordova</link>
      <pubDate>Tue, 12 Jun 2012 07:58:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/06/12/guide-to-using-yui-with-phonegap-cordova</guid>
      <description>&lt;p&gt;If you have ever wanted to use YUI in your next PhoneGap (Cordova) application you are in luck, it is so easy, it’s almost trivial. This will be the first in what will probably be a series of posts about using YUI with PhoneGap (Cordova).&lt;/p&gt;

&lt;p&gt;This tutorial assumes that you already know the basics of YUI but, at least for this first instalment, you shouldn’t have any problem following along if you don’t. I am also not going to cover the installation and setup as it is covered in detail in the &lt;a href=&#34;http://docs.phonegap.com/en/1.8.0/guide_getting-started_index.md.html&#34;&gt;Getting Started Guide&lt;/a&gt;. If you have never built a PhoneGap app I highly recommend completing their &lt;code&gt;Hello World&lt;/code&gt; application first. I will be progressing through using an HTC Incredible S with Android 2.3.3 but I will be sure to point out what is device or OS specific. The application that we are going to make is going to build upon the aforementioned &lt;code&gt;Hello World&lt;/code&gt; application adding in a button to change the text color.&lt;/p&gt;

&lt;p&gt;Most of the confusion with using YUI and PhoneGap (Cordova) is the combo loading - How do you use the Loader in a mobile app? The simple answer is that to get started we aren’t going to be. To accomplish our task we require a certain set of YUI modules. To simplify this tutorial we are going to use the &lt;a href=&#34;http://yuilibrary.com/yui/configurator/&#34;&gt;YUI Configurator&lt;/a&gt;. In the All Module list, click on the Node and Event Rollups. These rollups include more code than necessary but it makes the setup easier.&lt;/p&gt;

&lt;p&gt;The configurator will generate two script tags, be sure to select both urls individually Then copy the URL portions of the link generated by the configurator and paste it into the address bar of your browser. If you are having trouble with the configurator I have included the link to the two required files: &lt;a href=&#34;http://yui.yahooapis.com/combo?3.5.1/build/yui-base/yui-base-min.js&amp;amp;3.5.1/build/oop/oop-min.js&amp;amp;3.5.1/build/event-custom-base/event-custom-base-min.js&amp;amp;3.5.1/build/features/features-min.js&amp;amp;3.5.1/build/dom-core/dom-core-min.js&amp;amp;3.5.1/build/dom-base/dom-base-min.js&amp;amp;3.5.1/build/selector-native/selector-native-min.js&amp;amp;3.5.1/build/selector/selector-min.js&amp;amp;3.5.1/build/node-core/node-core-min.js&amp;amp;3.5.1/build/node-base/node-base-min.js&amp;amp;3.5.1/build/event-base/event-base-min.js&amp;amp;3.5.1/build/event-delegate/event-delegate-min.js&amp;amp;3.5.1/build/node-event-delegate/node-event-delegate-min.js&amp;amp;3.5.1/build/pluginhost-base/pluginhost-base-min.js&amp;amp;3.5.1/build/pluginhost-config/pluginhost-config-min.js&amp;amp;3.5.1/build/node-pluginhost/node-pluginhost-min.js&amp;amp;3.5.1/build/dom-style/dom-style-min.js&amp;amp;3.5.1/build/dom-screen/dom-screen-min.js&amp;amp;3.5.1/build/node-screen/node-screen-min.js&amp;amp;3.5.1/build/node-style/node-style-min.js&amp;amp;3.5.1/build/event-custom-complex/event-custom-complex-min.js&amp;amp;3.5.1/build/event-synthetic/event-synthetic-min.js&#34;&gt;File 1&lt;/a&gt; and &lt;a href=&#34;http://yui.yahooapis.com/combo?3.5.1/build/event-mousewheel/event-mousewheel-min.js&amp;amp;3.5.1/build/event-mouseenter/event-mouseenter-min.js&amp;amp;3.5.1/build/event-key/event-key-min.js&amp;amp;3.5.1/build/event-focus/event-focus-min.js&amp;amp;3.5.1/build/event-resize/event-resize-min.js&amp;amp;3.5.1/build/event-hover/event-hover-min.js&amp;amp;3.5.1/build/event-outside/event-outside-min.js&amp;amp;3.5.1/build/event-touch/event-touch-min.js&amp;amp;3.5.1/build/event-move/event-move-min.js&amp;amp;3.5.1/build/event-flick/event-flick-min.js&amp;amp;3.5.1/build/event-valuechange/event-valuechange-min.js&#34;&gt;File 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the code which is in your browser window and save the code into your assets/www directory in yui-file-1.js and yui-file-2.js respectively, &lt;strong&gt;the order these files are loaded is important&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to get YUI loaded and set up in our index.html file with three additional script tags.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;cordova-1.8.0.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;yui-file-1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;yui-file-2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;YUI_CONFIG = { bootstrap: false };&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First we load in the Cordova script followed by the two files generated by the YUI configurator plus one more to configure the YUI instance to follow. By setting bootstrap to false we are preventing YUI from trying to load the Loader. Additional details can be found in the &lt;a href=&#34;http://yui.yahooapis.com/combo?3.5.1/build/event-mousewheel/event-mousewheel-min.js&amp;amp;3.5.1/build/event-mouseenter/event-mouseenter-min.js&amp;amp;3.5.1/build/event-key/event-key-min.js&amp;amp;3.5.1/build/event-focus/event-focus-min.js&amp;amp;3.5.1/build/event-resize/event-resize-min.js&amp;amp;3.5.1/build/event-hover/event-hover-min.js&amp;amp;3.5.1/build/event-outside/event-outside-min.js&amp;amp;3.5.1/build/event-touch/event-touch-min.js&amp;amp;3.5.1/build/event-move/event-move-min.js&amp;amp;3.5.1/build/event-flick/event-flick-min.js&amp;amp;3.5.1/build/event-valuechange/event-valuechange-min.js&#34;&gt;bootstrap api&lt;/a&gt; documentation.&lt;/p&gt;

&lt;p&gt;We are ready for our typical YUI().use statement. Add another script tag just above the closing body tag and instead of loading in specific modules like you normally would, we are going to load in all modules that have been loaded into the page using the * symbol.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
YUI().use(&#39;*&#39;, function(Y) {

	var button = Y.one(&#39;button&#39;),
		header = Y.one(&#39;h1&#39;);

	button.on(&#39;touchstart&#39;, function(e) {
		header.setStyle(&#39;color&#39;, &#39;#00B2EE&#39;);
	});

});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We use the &lt;a href=&#34;http://yuilibrary.com/yui/docs/api/classes/YUI.html#method_one&#34;&gt;Y.one()&lt;/a&gt; method to select our dom elements as usual and then attach an event listener to the &lt;code&gt;button&lt;/code&gt; using the &lt;a href=&#34;http://yuilibrary.com/yui/docs/api/classes/Node.html#method_on&#34;&gt;Node.on()&lt;/a&gt; method. But instead of using the typical &lt;code&gt;click&lt;/code&gt; event, we substitute it for the &lt;code&gt;touchstart&lt;/code&gt; event. Just for fun you can change the &lt;code&gt;touchstart&lt;/code&gt; back to &lt;code&gt;click&lt;/code&gt; and you will see that it works but there is a noticeable delay in the action - this will happen with any click event handler with PhoneGap (Cordova). we then take the element we assigned to the &lt;code&gt;header&lt;/code&gt; property and set it’s color with the &lt;a href=&#34;http://yuilibrary.com/yui/docs/api/classes/Node.html#method_setStyle&#34;&gt;Node.setStyle()&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;And that’s it! You can now load this onto your device using the same method described in the PhoneGap (Cordova) example and you have made your very first YUI PhoneGap (Cordova) application. I hope you enjoyed this brief tutorial and if you have any questions feel free to comment below, mention me on &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;twitter&lt;/a&gt; or join #yui on irc.freenode.net&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;My First Cordova YUI App&amp;lt;/title&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;cordova-1.8.0.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;yui-file-1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;yui-file-2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;YUI_CONFIG = { bootstrap: false };&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h1&amp;gt;YUI PhoneGap (Cordova) Example&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Click this button for a surprise&amp;lt;/p&amp;gt;
&amp;lt;button&amp;gt;Click Me&amp;lt;/button&amp;gt;

&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
YUI().use(&#39;*&#39;, function(Y) {

	var button = Y.one(&#39;button&#39;),
		header = Y.one(&#39;h1&#39;);

	button.on(&#39;touchstart&#39;, function(e) {
		header.setStyle(&#39;color&#39;, &#39;#00B2EE&#39;);
	});

});
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>YUI Popup Calendar</title>
      <link>http://fromanegg.com/post/2012/04/12/yui-popup-calendar</link>
      <pubDate>Thu, 12 Apr 2012 19:22:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/04/12/yui-popup-calendar</guid>
      <description>&lt;p&gt;The often requested Popup Calendar or as some may call it, Date Picker, is now finally available in the Yahoo CDN hosted YUI Gallery!&lt;/p&gt;

&lt;p&gt;The YUI Popup Calendar component extends YUI’s Calendar Widget as well as a few other Widget modules you likely have already loaded on the page giving you a very lightweight (1.6KB minified) way to add date picker like functionality to your web page or application.&lt;/p&gt;

&lt;p&gt;Additional details, examples, and more can be found by following the links below. I hope that you find this module helpful and I’ll continue to develop on it so please feel free to contact me with bug reports and feature requests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fromanegg.com/code/yui-popup-calendar&#34;&gt;YUI Popup Calendar documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yuilibrary.com/gallery-archive/gallery/show/popup-calendar.html?&#34;&gt;YUI Popup Calendar on YUI Gallery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Handling module load errors with YUI Loader</title>
      <link>http://fromanegg.com/post/2012/02/06/handling-module-load-errors-with-yui-loader</link>
      <pubDate>Mon, 06 Feb 2012 15:50:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/02/06/handling-module-load-errors-with-yui-loader</guid>
      <description>&lt;p&gt;This information is accurate for YUI 3.5.0pr2 - there are cross browser issues with the following method on previous versions.&lt;/p&gt;

&lt;p&gt;From time to time you may find yourself loading modules that aren’t available. Whether it be from a user supplied modules list or an unreliable source, the YUI instance confg gives you an easy way to check if there are any errors while loading your modules.&lt;/p&gt;

&lt;p&gt;A common YUI config and use statement would look like the following.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;YUI({
  modules: { // Define your custom module meta data
    &#39;custom-module&#39; : {
      fullpath: &#39;path/to/module.js&#39;
    }
  }
}).use(&#39;node&#39;, &#39;custom-module&#39;, function(Y) {
  // Your code here
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If for some reason the loader was unable to fetch a required module and you wanted to act on that event, the loader provides you with an onFailure method that is called with an object that has details about the modules it failed to fetch.&lt;/p&gt;

&lt;p&gt;To use this method you would amend the above code to include that method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;YUI({
  modules: { // Define your custom module meta data
    &#39;custom-module&#39; : {
      fullpath: &#39;path/to/module.js&#39;
    }
  },
  onFailure: function(error) {
  	// Error handling code
  }
}).use(&#39;node&#39;, &#39;custom-module&#39;, function(Y) {
  // Your code here
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error object is structured.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  data: Array[], // Contains a list of the requested modules
  msg: &amp;quot;Failed to load path/to/module&amp;quot;, // A string error message
  success: false // A bool representation of the success of the requests
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s that simple, by setting up your onFailure callback you can easily handle any errors that may arise by an improperly structured config or use statement.&lt;/p&gt;

&lt;p&gt;Warning&lt;/p&gt;

&lt;p&gt;If there is a failure in your initial module request the onFailure callback will be called before the Y instance is set-up. This means that no YUI methods will be available and calls to them will cause your application to fail. In this case the this property will point to YUI.&lt;/p&gt;

&lt;p&gt;More Reading&lt;/p&gt;

&lt;p&gt;In the following example the onFailure callback will be called if at any time there is a failure while trying to load modules. You will need to keep this in mind if your doing any lazy loading of modules so that you can appropriately handle the errors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;YUI({
  modules: { // Define your custom module meta data
    &#39;good-module&#39; : {
      fullpath: &#39;correct/path/to/good-module.js&#39;
    },
    &#39;bad-module&#39; : {
      fullpath: &#39;path/to/bad-module&#39;
    }
  },
  onFailure: function(error) {
  	// I&#39;m going to be called when the request for bad-module is made
  }
}).use(&#39;node&#39;, &#39;good-module&#39;, function(Y) {

  Y.use(&#39;bad-module&#39;, function() {
  	// More code here
  });

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error.msg property string will contain comma delimited messages about which values failed.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;YUI({
  modules: { // Define your custom module meta data
    &#39;wrong-module&#39; : {
      fullpath: &#39;path/to/wrong-module&#39;
    },
    &#39;bad-module&#39; : {
      fullpath: &#39;path/to/bad-module&#39;
    }
  },
  onFailure: function(error) {
  	console.log(error);
  }
}).use(&#39;node&#39;, &#39;wrong-module&#39;, &#39;bad-module&#39;, function(Y) {
  // Code here
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
  data: Array[22],
  msg: &amp;quot;Failed to load path/to/wrong-module,Failed to load path/to/bad-module&amp;quot;,
  success: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method only works if the module has been defined. You will not receive an error for the crazy-module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;YUI({
  modules: { // Define your custom module meta data
    &#39;wrong-module&#39; : {
      fullpath: &#39;path/to/wrong-module&#39;
    }
  },
  onFailure: function(error) {
  	console.log(error);
  }
}).use(&#39;node&#39;, &#39;wrong-module&#39;, &#39;crazy-module&#39;, function(Y) {
  // Code here
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will however get a string error logged to the console in addition to the onFailure if the undefined module comes before the defined custom modules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;YUI({
  modules: { // Define your custom module meta data
    &#39;wrong-module&#39; : {
      fullpath: &#39;path/to/wrong-module&#39;
    }
  },
  onFailure: function(error) {
  	console.log(error);
  }
}).use(&#39;node&#39;, &#39;crazy-module&#39;, &#39;wrong-module&#39;, function(Y) {
  // Code here
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;quot;yui: NOT loaded: crazy-module&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>