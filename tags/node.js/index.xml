<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>From An Egg</title>
    <link>http://fromanegg.com/tags/node.js/index.xml</link>
    <description>Recent content on From An Egg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://fromanegg.com/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to make a Node.js static file server - Part 1</title>
      <link>http://fromanegg.com/post/2012/02/26/how-to-make-a-node.js-static-file-server---part-1</link>
      <pubDate>Sun, 26 Feb 2012 19:19:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2012/02/26/how-to-make-a-node.js-static-file-server---part-1</guid>
      <description>

&lt;p&gt;This multi-part series will take you through everything from how to get a basic Node.js static file server going, to different way’s to deliver the content to the user, common pitfalls, caching, and when to use Node.js to serve files vs other solutions.&lt;/p&gt;

&lt;p&gt;I’m going to assume you already have Node.js up running on your computer and that you know javascript. This code was developed on v0.6.1-pre and I will make an effort to update it and the version number as things change with Node.js.&lt;/p&gt;

&lt;p&gt;First thing your going to do is create a new file which will house our server code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few native Node.js modules that we’ll need and a few more will be added as this series continues.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var http = require(&#39;http&#39;),
    path = require(&#39;path&#39;),
    fs = require(&#39;fs&#39;),
    util = require(&#39;util&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are pulling in the following modules:
- &lt;a href=&#34;https://nodejs.org/docs/latest/api/http.html&#34;&gt;HTTP&lt;/a&gt;: Low level API that handles the parsing of streams and handling of the HTTP messages.
- &lt;a href=&#34;https://nodejs.org/docs/latest/api/path.html&#34;&gt;Path&lt;/a&gt;: A string manipulation library, also allows you to check the file system for the existence of a file.
- &lt;a href=&#34;https://nodejs.org/docs/latest/api/fs.html&#34;&gt;File System&lt;/a&gt;: Provides simple wrappers around standard POSIX functions for file IO.
- &lt;a href=&#34;https://nodejs.org/docs/latest/api/util.html&#34;&gt;Utilities&lt;/a&gt;: Extra utility features.&lt;/p&gt;

&lt;h3 id=&#34;create-the-server&#34;&gt;Create the server&lt;/h3&gt;

&lt;p&gt;Within the scope of this part of the tutorial we only need to access the HTTP module once for its &lt;a href=&#34;https://nodejs.org/docs/latest/api/http.html#http.createServer&#34;&gt;createServer()&lt;/a&gt; method. We create a HTTP server which calls the &lt;code&gt;_handler&lt;/code&gt; callback when a &lt;a href=&#34;https://nodejs.org/docs/latest/api/http.html#event_request_&#34;&gt;request event&lt;/a&gt; is made and start listening on a specified port.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;http.createServer(_handler).listen(3000);
console.log(&#39;Server running at http://127.0.0.1:3000/&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now set up the request handler which will house all of the code that handles each and every request that comes into your server. We’ll also define some variables which we’ll use later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function _handler(req, res) {
    var root = &amp;quot;..&amp;quot;,
        url = &amp;quot;&amp;quot;,
        contentType = &amp;quot;text/plain&amp;quot;,
        filePath = &amp;quot;&amp;quot;;

        //All following code goes here
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because this is strictly a file server we only want to support the GET method and reject any other requests. To do this we need to reference the request object passed to our callback, an instance of &lt;a href=&#34;https://nodejs.org/docs/latest/api/http.html#http.ServerRequest&#34;&gt;http.ServerRequest&lt;/a&gt; stored in &lt;code&gt;req&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (req.method !== &#39;GET&#39;) { //If the request method doesn&#39;t equal &#39;GET&#39;
    res.writeHead(405); //Write the HTTP status to the response head
    res.end(&#39;Unsupported request method&#39;, &#39;utf8&#39;); //End and send the response
    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On most web servers when you send a request to the server without a file you will get some type of default file usually the index.html. Because this is a file server, if they aren’t requesting a file, they are going to get an error. After we determine that they are requesting a file we do simple string concatenation to build the file path and then pass it to the &lt;a href=&#34;https://nodejs.org/docs/latest/api/path.html#path.exists&#34;&gt;path.exists()&lt;/a&gt; method. This method will test the file path for existence and then pass that information to the callback, &lt;code&gt;serveRequestedFile&lt;/code&gt; in this case.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (&#39;.&#39; + req.url !== &#39;./&#39;) {
    filePath = root + req.url;
    path.exists(filePath, serveRequestedFile);		
} else {
    res.writeHead(400);
    res.end(&#39;A file must be requested&#39;, &#39;utf8&#39;);
    return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stream your files&lt;/p&gt;

&lt;p&gt;Now that we have set up the http server, verified that they are using the correct method, and that they are requesting a file, we need to serve that file to them. To do this we will use our previously mentioned &lt;code&gt;serveRequestedFile()&lt;/code&gt; function which will receive the status of our file inquiry which we need to test before proceeding.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function serveRequestedFile(file) {
    if (file === false) {
        res.writeHead(404);
        res.end();
        return;
    }

    //Following code will go here

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we aren’t implementing any caching mechanism yet we don’t want to read the whole file into memory before serving. To get around that we use the File System’s &lt;a href=&#34;https://nodejs.org/docs/latest/api/fs.html#fs.createReadStream&#34;&gt;fs.createReadStrem()&lt;/a&gt; method. This method returns a &lt;a href=&#34;https://nodejs.org/docs/latest/api/streams.html#readable_Stream&#34;&gt;Readable Stream&lt;/a&gt; which emits a number of events. We will set up an error event handler in the event there is a server error and the file cannot be served to the user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var stream = fs.createReadStream(filePath);

stream.on(&#39;error&#39;, function(error) {
    res.writeHead(500);
    res.end();
    return;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we send the data to the user we should set the files mime type. For simplicity sake I have included the mime object within the function itself. On a true file server you would likely import a much larger mime list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var mimeTypes = {
    &#39;.js&#39; : &#39;text/javascript&#39;,
    &#39;.css&#39; : &#39;text/css&#39;,
    &#39;.gif&#39; : &#39;image/gif&#39;
}

contentType = mimeTypes[path.extname(filePath)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have now verified that the file exists, created a stream instance for the file in question, set up basic error handling, and found the files mime type. The only thing left is to actually send the file to the user. We first set the content type and the status in he header then use Utilities &lt;a href=&#34;https://nodejs.org/docs/latest/api/util.html#util.pump&#34;&gt;util.pump()&lt;/a&gt; method to push the previously initiated stream to the user. The pump method reads the data from the readable stream &lt;code&gt;stream&lt;/code&gt; and sends it to the writable stream &lt;code&gt;res&lt;/code&gt;. If there is an error in this process or the stream is closed the third arugment, the callback, is called.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;res.setHeader(&#39;Content-Type&#39;, contentType);
res.writeHead(200);

util.pump(stream, res, function(error) {
    //Only called when the res is closed or an error occurs
    res.end();
    return;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start the server and start serving files!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope you enjoyed the first part of this series and were able to get your own file server up and running. I have included a &lt;a href=&#34;https://gist.github.com/hatched/1920353&#34;&gt;working example&lt;/a&gt; of the above code if you want to see it in its entirety. If you need further help feel free to comment below, mention me on &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;twitter&lt;/a&gt;, or join #Node.js on irc.freenode.net.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>