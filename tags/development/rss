<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>From An Egg</title>
    <link>https://fromanegg.com/tags/development/rss/</link>
    <description>Recent content on From An Egg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://fromanegg.com/tags/development/rss/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Secure GitHub pages with SSL/TLS</title>
      <link>https://fromanegg.com/post/2016/11/13/secure-github-pages-with-ssl-tls</link>
      <pubDate>Sun, 13 Nov 2016 18:19:00 -0600</pubDate>
      
      <guid>https://fromanegg.com/post/2016/11/13/secure-github-pages-with-ssl-tls</guid>
      <description>&lt;p&gt;At the time of writing, this blog is hosted on GitHub and they do not support serving https on custom domains. But because there are many reasons why every website should be hosted under https this guide will show you how I got https for this blog on GitHub.&lt;/p&gt;

&lt;p&gt;First you&amp;rsquo;ll need a couple things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A website hosted on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; with a custom domain.&lt;/li&gt;
&lt;li&gt;An account with &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;Cloudflare&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;After signing up with Cloudflare you&amp;rsquo;ll be prompted to add your domain, at which point it&amp;rsquo;ll scan your DNS records automatically. You&amp;rsquo;ll want to make sure that it has all of them and that they are correct by cross referencing them with your current DNS provider.&lt;/li&gt;
&lt;li&gt;Switch to the Crypto tab and change the &lt;code&gt;SSL type&lt;/code&gt; to &lt;code&gt;Flexible&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Update the Nameservers at your domain registrar to point to the ones provided by Cloudflare in your setup steps.&lt;/li&gt;
&lt;li&gt;Redirect all of your http traffic to https traffic using Cloudflare by adding a &lt;code&gt;Page Rule&lt;/code&gt;. You&amp;rsquo;ll want to add a rule which looks like &lt;code&gt;http://*example.com/*&lt;/code&gt; and then add a setting for &lt;code&gt;Always Use HTTPS&lt;/code&gt;. After clicking Save and Deploy all requests to the http version of your site will be 301 redirected to the https version of your site. &lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200170536-How-do-I-redirect-all-visitors-to-HTTPS-SSL-&#34;&gt;Cloudflare knowledge base&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set up a canonical url on each page so that web crawlers will know that any path which gets the user to the site that the canonical url is the primary path that should be stored. To do that add &lt;code&gt;&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;http://example.com/path/to/post&amp;quot;/&amp;gt;&lt;/code&gt; to the head of each page.&lt;/li&gt;
&lt;li&gt;Update the paths for your assets so that they are requested from the https path or browsers won&amp;rsquo;t load them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the DNS records propagate you&amp;rsquo;ll be able to visit your website by visiting &lt;code&gt;https://example.com&lt;/code&gt;. You might notice that you&amp;rsquo;ll still be using the github.com certificate for a bit still, I found that it took a few hours for a new certificate to be issued from Cloudflare.&lt;/p&gt;

&lt;p&gt;The one caveat here is that the connection between Cloudflare and GitHub is not under https. However these steps will still protect your users from an unscrupulous ISP and users at coffee shops. But as GitHub themselves say &amp;ldquo;&lt;a href=&#34;https://help.github.com/articles/what-is-github-pages/&#34;&gt;GitHub Pages sites shouldn&amp;rsquo;t be used for sensitive transactions like sending passwords or credit card numbers.&lt;/a&gt;&amp;rdquo; anyways.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this post, if you have any questions or comments let me know on Twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; or comment below. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The importance of minification and compression</title>
      <link>https://fromanegg.com/post/2016/01/02/the-importance-of-minification-and-compression</link>
      <pubDate>Sat, 02 Jan 2016 13:15:00 -0600</pubDate>
      
      <guid>https://fromanegg.com/post/2016/01/02/the-importance-of-minification-and-compression</guid>
      <description>&lt;p&gt;Over the holidays I’ve been working on a small project playing with some of the new Javascript libraries that came out over the past year. After a while I noticed that the size of the Javascript I was sending to the client was growing and starting to approach 100 KB for a basic isomorphic website. I figured now was a good time to look into minification and compression.&lt;/p&gt;

&lt;p&gt;The site starts out by loading in the following raw code:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Riot.js&lt;/th&gt;
&lt;th&gt;64KB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Page.js&lt;/td&gt;
&lt;td&gt;14KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;client code&lt;/td&gt;
&lt;td&gt;14KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;92KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After Browserify was done rolling all of the code up into a single file it was ~92KB which was getting a little large for a website which basically did nothing. First step was to add minification to the Makefile using &lt;a href=&#34;https://github.com/mishoo/UglifyJS2&#34;&gt;UglifyJs2&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-make&#34; data-lang=&#34;make&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;$(CLIENT_MIN_ROLLUP)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLIENT_ROLLUP&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;UGLIFYJS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; --screw-ie8 $^ -o &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This step brought it down from 92KB to 44KB shaving off over 50% of the original size. This is still quite a lot of code for such a simple site so the next step is to add gzip compression for everything being sent. I am using &lt;a href=&#34;https://github.com/expressjs/express&#34;&gt;expressjs 4.0&lt;/a&gt; as the webserver so to add gzip it’s as easy as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;compression&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;compression&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;compression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After adding gzip the data sent over the wire went down to an impressive 14KB. That’s only 15% of the original size, a savings of 78KB for a total of about 2 minutes worth of work. This really shows that no matter the size of your website the cost/bennefit of implementing even basic minification and compression is well worth it. If you have any questions or comments leave them in the comments below or mention me on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Juju for development</title>
      <link>https://fromanegg.com/post/2015/06/13/using-juju-for-development</link>
      <pubDate>Sat, 13 Jun 2015 16:11:00 -0600</pubDate>
      
      <guid>https://fromanegg.com/post/2015/06/13/using-juju-for-development</guid>
      <description>

&lt;p&gt;Juju works great for software development involving simple environments and is amazing for complex environments. A recent question on Ask Ubuntu &lt;a href=&#34;http://askubuntu.com/questions/635758/is-juju-a-suitable-tool-for-development-as-well-as-deployment&#34;&gt;“Is Juju a suitable tool for development as well as deployment?”&lt;/a&gt; made me realize that we use Juju for development every day but there really isn’t much documentation on the subject.&lt;/p&gt;

&lt;p&gt;For the rest of this post I’m going to assume that you are already familiar with the concept of Juju and what problems it solves on the deployment side of things. If you aren’t, I recommend reading an earlier post of mine &lt;a href=&#34;http://fromanegg.com/post/97035773367/juju-explain-it-to-me-like-im-5&#34;&gt;“Juju - Explain it to me like I’m 5”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the biggest problems when developing any kind of software is getting the dependencies up and running in a way which matches the production environment close enough to be sure that you aren’t going to run into “this environment only” bugs. Sure you can install mysql onto your local machine and run the database dump on that install, but you also have to make sure that you apply all of the same configuration, indexes, build flags, etc. as the production environment.&lt;/p&gt;

&lt;p&gt;Even once you get it up and running you then need the ability to update it after modifications were made by someone else on the project all with high production parity, and without extraneous downtime.&lt;/p&gt;

&lt;p&gt;To illustrate the benefits of using Juju for development I’m going to use a fictitious photo and video sharing website. A website like this would require multiple services, load balancer, web server, database, blob store, user authentication, photo processor, video processor.&lt;/p&gt;

&lt;p&gt;Keeping in mind that a Juju Charm can be written using any programming language or DSL that can be executed on the host machine. This means it can use Puppet, Chef, Python, JavaScript, Docker, and pretty much anything else you would like to use. Juju provides distinct advantages for project development depending on the lifecycle of the project. For our photo video site let’s first assume that we’re just starting the project and then later on we’ll assume that the project is mature, released, and still under active development.&lt;/p&gt;

&lt;h4 id=&#34;just-starting-out&#34;&gt;Just starting out&lt;/h4&gt;

&lt;p&gt;Typically when a project starts you’re only going to need a couple services, the database and your webserver. Let’s start our environment and install the database and webserver on our local machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span&gt;&lt;/span&gt;juju bootstrap &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt;
juju deploy apache2
juju deploy mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great, It’s 5 minutes in and we now have apache2 and mongodb running on our machine in separate LXC’s, we can now start developing our website and pointing it to these services.&lt;/p&gt;

&lt;p&gt;Parallel to this, your teammate is working on the user authentication service, it’s going well and they want someone to help them test it in the application environment. So lets get that service that they have been working on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/charms/trusty &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/charms/trusty
git clone --depth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; git@github.com:photovideo/authenticator
juju deploy --repository&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;. local:trusty/authenticator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;For more information on deploying local charms see &lt;a href=&#34;http://askubuntu.com/questions/568137/how-to-deploy-juju-charm-in-development-branch/568174#568174&#34;&gt;This Post&lt;/a&gt; on Ask Ubuntu.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A few minutes later and you have an identical copy to their user authenticator service, you can point your website to it and give it a try. A little later the authenticator service has been updated and you’d like to run it again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/charms/trusty/authenticator
git pull
juju upgrade-charm --repository&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This process repeats itself throughout each service and across each member of your team. Allowing each one to update their dependencies within minutes to identical representations of how it’ll be run in production.&lt;/p&gt;

&lt;h4 id=&#34;released-project&#34;&gt;Released project&lt;/h4&gt;

&lt;p&gt;Now that your project has been released, deployed using Juju, running in production, you’ve had a chance to take advantage of Juju’s deployment and scaling features but how does Juju help you develop now?&lt;/p&gt;

&lt;p&gt;In some ways it’s even easier to deploy. In this case, I’m going to assume that your services are private and not stored in the &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju Charm Store&lt;/a&gt;. If they were in there you wouldn’t have to first clone the repositories.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/charms/trusty &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/charms/trusty
git clone --depth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; git@github.com:photovideo/mongodb
git clone --depth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; git@github.com:photovideo/authenticator
…

juju-quickstart -e &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; photovideo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Taking advantage of Juju Quickstart and the Juju bundles functionality you can deploy your entire environment with identical services, configuration, and machine placements. This will open up the GUI which will allow you to modify the machine placement of any of those services and change configuration values before deploying to your machine. Once you hit commit, sit back and wait for it to deploy an identical environment to your production environment on your local machine.&lt;/p&gt;

&lt;p&gt;Now you can work on the specific service you’re interested in within an identical environment to everyone on your team. And when a service gets updated by another member on your team it’s trivial to update.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/charms/trusty/authenticator
git pull
juju upgrade-charm --repository&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I hope this gets you excited to use Juju for development as well as deployment. My team uses Juju for development this way and has for over a year. It allows us to be more productive because we don’t have to waste time installing and updating services the hard way.&lt;/p&gt;

&lt;p&gt;I’ll be creating a follow-up to this post with real code examples and workflows for doing the actual development of these services, stay tuned! Thanks for reading, if you have any questions or comments file them below or you can hit me up on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unidirectional data flow architecture</title>
      <link>https://fromanegg.com/post/2014/05/15/unidirectional-data-flow-architecture</link>
      <pubDate>Thu, 15 May 2014 23:18:00 -0600</pubDate>
      
      <guid>https://fromanegg.com/post/2014/05/15/unidirectional-data-flow-architecture</guid>
      <description>&lt;p&gt;Since Facebook released &lt;a href=&#34;https://facebook.github.io/react/docs/flux-overview.html&#34;&gt;Flux&lt;/a&gt; there has been a lot of chatter about the unidirectional data flow architecture and how it helps large scale applications be easier to reason about and develop. With the &lt;a href=&#34;https://github.com/juju/juju-gui&#34;&gt;Juju GUI&lt;/a&gt; nearing 70,000 lines of code in the core application we were running into an issue where it was becoming difficult to maintain the correct state throughout the many rendered UI components which are being consistently changed from the user interactions and changes coming in over the websocket from the users &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju&lt;/a&gt; environment.&lt;/p&gt;

&lt;p&gt;In an effort to remedy this we determined that the only way to solve our current issues and prevent new ones going forward is to develop a unidirectional data flow architecture vs our MVC event style system which was currently in place. The execution flow we decided on was as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://fromanegg.com/images/unidirectional-data-flow-architecture-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When a user visits a url or a delta comes in over the websocket it is parsed and split into disparate sections of state for each component that’s involved.&lt;/li&gt;
&lt;li&gt;That state is then saved into the state system.&lt;/li&gt;
&lt;li&gt;When the state system changes it diffs from it’s previous state and passes the diff off to the dispatcher.&lt;/li&gt;
&lt;li&gt;The dispatcher scans through the diff and passes off the various state components to their registered handlers.&lt;/li&gt;
&lt;li&gt;Those handlers then pass the updated data into the UI components.&lt;/li&gt;
&lt;li&gt;The UI components are then responsible for updating their DOM representation.&lt;/li&gt;
&lt;li&gt;If the user makes a change to the UI, that UI component requests a change from the state system and the cycle repeats.
You’ll notice that this is strikingly similar to the Flux architecture:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://fromanegg.com/images/unidirectional-data-flow-architecture-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s great to see cases of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_discovery&#34;&gt;multiple discovery hypothesis&lt;/a&gt; in action. It’s a sign that you’re on the right track for solving the bigger picture problems. It’s also nice to see someone formalizing this architecture for client side applications in the hopes that others will be able to skip these scalability problems. While our implementation differs from Flux, the architecture is nearly identical. I highly recommend this architecture to anyone writing a large complex application of any kind, client or server side, as it dramatically reduces the complexity of the applications execution.&lt;/p&gt;

&lt;p&gt;Do you work on a large application? Do you think this architecture could help simplify your app? Let me know in the comments below, &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;, or &lt;a href=&#34;https://plus.google.com/+JeffPihach&#34;&gt;+Jeff Pihach&lt;/a&gt; Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When to update your semver version number</title>
      <link>https://fromanegg.com/post/2014/04/25/when-to-update-your-semver-version-number</link>
      <pubDate>Fri, 25 Apr 2014 10:49:00 -0600</pubDate>
      
      <guid>https://fromanegg.com/post/2014/04/25/when-to-update-your-semver-version-number</guid>
      <description>&lt;p&gt;Anyone who is familiar with package versioning has used, or at the very least heard of, Semantic Versioning. For the uninitiated, semver is a three part version number in the format MAJOR.MINOR.PATCH ex) 1.13.2, and you can find very in-depth details on the &lt;a href=&#34;http://semver.org/&#34;&gt;semver website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The semver website outlines the rules for incrementing version numbers as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MAJOR: When you make incompatible API changes.&lt;/li&gt;
&lt;li&gt;MINOR: When you add functionality in a backwards-compatible manner.&lt;/li&gt;
&lt;li&gt;PATCH: When you make backwards compatible bug fixes.
At &lt;a href=&#34;https://gophercon.com/&#34;&gt;gophercon&lt;/a&gt; I had a discussion with another engineer about what these mean. When does a change make the API incompatible with a previous release? Take the following contrived example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your API typically returns a key/value pair for a requested field:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;‘&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But now you decide to change the value returned by capitalizing the first character in the returned strings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;‘&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What portion of the version should be updated with this change?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MAJOR: It could break someones code who is relying on the case of the returned value.&lt;/li&gt;
&lt;li&gt;MINOR: This is adding functionality because the value being returned is actually a title for a story.&lt;/li&gt;
&lt;li&gt;PATCH: Stories should always have been capitalized so this is actually a bug fix.
This shows that the rules are up for a lot of interpretation and will depend heavily on your situation. This unfortunately doesn’t make it easier to explain to someone who is new to, or skeptical of, semver. As a solution I came up with a slightly more specific set of rules which I think make the decision much easier for everyone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jeff’s semver incrementing version number rules:&lt;/p&gt;

&lt;p&gt;I inverted the rule set so it can be read that any later rule overwrites the previous rule so the version section moves up a level.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If this is fixing a reported bug in your system: PATCH&lt;/li&gt;
&lt;li&gt;If this is adding a feature to your public or private api: MINOR&lt;/li&gt;
&lt;li&gt;If this is a change to your private methods or data structures: MINOR&lt;/li&gt;
&lt;li&gt;If it broke your public api call tests: MAJOR
Because your tests should test exactly what you expect your public API to return it should be very trivial to know when a change is breaking what others could be relying on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think of this approach? Do you find it any easier to understand? Do you have any other rules to add? Or are you already using semver and have a different approach to deciding when to increase which number? Comment below or mention me on twitter &lt;a href=&#34;https://twitter.com/FromAnEgg&#34;&gt;@fromanegg&lt;/a&gt; and let me know. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self documenting code is not enough</title>
      <link>https://fromanegg.com/post/2014/03/13/self-documenting-code-is-not-enough</link>
      <pubDate>Thu, 13 Mar 2014 09:22:00 -0600</pubDate>
      
      <guid>https://fromanegg.com/post/2014/03/13/self-documenting-code-is-not-enough</guid>
      <description>&lt;p&gt;Our industry moves so fast that just to stay on the curve, let alone ahead of it, you need to spend a considerable amount of time reading other peoples code. Whether that be in code reviews, gists, or open source projects, you can glean a lot of invaluable information about new technologies, protocols, and techniques.&lt;/p&gt;

&lt;p&gt;As an industry as a whole we need to understand this and write all code, even that which at first is not meant for public consumption, as &lt;a href=&#34;https://en.wikipedia.org/wiki/Self-documenting_code&#34;&gt;self-documenting code&lt;/a&gt; with comments which detail, to anyone reading it, the why the code is doing what it’s doing.&lt;/p&gt;

&lt;p&gt;Self-documenting code is code which follows commonly accepted style conventions, and uses descriptive variable, and function names. As an example, self-documenting code turns this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Into:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDifference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;point1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s much easier to understand what the second function is doing at a glance vs the first.&lt;/p&gt;

&lt;p&gt;This function is so trivial many will stop here and continue on. But trivial scripts have a way of becoming more, whether they grow into a project of their own or are copy/pasted into much larger projects where their use may not be as clear.&lt;/p&gt;

&lt;p&gt;Lets assume for a moment that this function was copy &amp;amp; pasted into a larger projects utility class. Wouldn’t it be nice if it would automatically be added to the API docs?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  Calculate the difference between the x and y coords of two points.&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;  @method getDifference&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  @param {Object} point1 The first point to compare.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  @param {Object} point2 The second point to compare.&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  @return {Array} The difference between the two points in the format [x, y]&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;getDifference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;point1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;point2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This function can now be copy and pasted into any project without any ambiguity about it’s functionality and will automatically be included in the API documentation.&lt;/p&gt;

&lt;p&gt;To illustrate the importance of inline comments even with self documenting code. Take the following method from the &lt;a href=&#34;https://github.com/juju/juju-gui&#34;&gt;Juju GUI source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Juju GUI has just over 65,000 lines of javascript excluding dependencies and growing fast every day. With so many developers writing code this fast it would be very difficult to understand why things were done the way they were done without the additional 17,000 lines of api comment blocks and inline documentation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exportYAML&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exportDeployer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exportData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jsyaml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exportBlob&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Blob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exportData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
             &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;text/plain;charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;saveAs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exportBlob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;export.yaml&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using only self-documenting code you would probably be able to figure out that this function extracts some data from a database, converts it into yaml, then saves the blob to disk. Unfortunately this would have taken you at least 4x longer to parse because it doesn’t have any comments. You would also be missing some very important information from a previous bug fix. Now here it is with it’s comments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;  Export the YAML for this environment.&lt;/span&gt;

&lt;span class=&#34;cm&#34;&gt;  @method exportYAML&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;exportYAML&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exportDeployer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exportData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;jsyaml&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dump&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// In order to support Safari 7 the type of this blob needs&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// to be text/plain instead of it&amp;#39;s actual type of application/yaml.&lt;/span&gt;
  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exportBlob&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Blob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exportData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;text/plain;charset=utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;saveAs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exportBlob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;export.yaml&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without even reading the code you now know what the purpose of this method is which will dramatically reduce time when debugging or adding more features. More importantly however, the why of some of the code is outlined for future-you or another developer who may end up here. Without the comment regarding Safari 7 they very likely could have changed the mime type to application/yaml and introduced a difficult to find bug.&lt;/p&gt;

&lt;p&gt;Although these examples were simple I hope I have illustrated the importance of adding comments to your self-documenting code to aid not only future-you but also any other developer who may come by and learn from your work. Thanks for reading! What commenting techniques do you use? Comment below or mention me on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YUIConf talk 2012</title>
      <link>https://fromanegg.com/post/2013/01/17/yuiconf-talk-2012</link>
      <pubDate>Thu, 17 Jan 2013 11:07:00 -0600</pubDate>
      
      <guid>https://fromanegg.com/post/2013/01/17/yuiconf-talk-2012</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3guDNBdxoE8?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;My talk from YUIConf 2012, where I showcase the issues of modern web development that arise when using various libraries and explain how the features of YUI make it a clear leader for development teams of any size. I discuss standard development procedures, modular development and extensibility, API consistency, documentation, and testing. Hope you enjoy, Let me know what you think!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The importance of personal developer projects</title>
      <link>https://fromanegg.com/post/2013/01/09/the-importance-of-personal-developer-projects</link>
      <pubDate>Wed, 09 Jan 2013 10:54:00 -0600</pubDate>
      
      <guid>https://fromanegg.com/post/2013/01/09/the-importance-of-personal-developer-projects</guid>
      <description>&lt;p&gt;Fueled by the constant push for new ideas and better experiences by our clients and employers; web development has to be one of, if not the, fastest evolving industry today. It’s our job as developers to at least keep up with the curve; unfortunately because of this constant push we often end up over specializing, leaving us ill prepared come the time to move onto the next big thing. We try to remedy this complacency by reading what others are working on and dabbling here and there on side projects, but quite often we can’t dedicate enough of our personal time to keep ahead of that curve.&lt;/p&gt;

&lt;p&gt;Some employers, seeing this issue time and time again, have implemented dedicated personal project time in which you take a section of your typical work week to work on a project of your choosing that’s outside of the scope of your daily project. This forces you to break out of your typical mindset and keep innovating.These employers do this because they understand that projects don’t last forever and when those projects end they want you to be prepared for the next thing without having to lose a couple weeks or more getting back up to speed.&lt;/p&gt;

&lt;p&gt;These personal projects also have other positive side effects for your employer. Not only will they have developers who don’t feel burnt out, but are also constantly innovating and trying new things which may turn into new products or product enhancements that they never otherwise would have had. A number of very popular products came out of these programs such as the public transit section of Google Maps.&lt;/p&gt;

&lt;p&gt;But of course in the real world not all companies are able to offer this perk, so what can you do if your boss turns your personal project time request down?&lt;/p&gt;

&lt;p&gt;You can start off by reading at least one blog post per day on something that interests you, try to also pick a couple every week which aren’t in your little corner of the web to get an understanding of the industry as a whole - who knows you may find something you really like that you otherwise wouldn’t have known about.&lt;/p&gt;

&lt;p&gt;Participate in local dev meet ups - talking to other developers from other companies, on other projects, in other industries is very refreshing when you have just spent the last 4 months hammering on the same feature.&lt;/p&gt;

&lt;p&gt;If you find you are getting burnt out on your current task there is no shame in asking your project lead if you can switch to something else to recharge for a couple days.&lt;/p&gt;

&lt;p&gt;And last but certainly not least. Dream up your own after hours personal project that challenges you, makes you learn something new, and maybe even uses some of the cool new technologies thst you have been reading about in those blog posts. But most importantly - schedule time to work on it. We all lead very busy lives and without that schedule it will be pushed aside forever.&lt;/p&gt;

&lt;p&gt;My goal is that you can take at least a couple ideas from this post to avoid the oh-so-common burn-out and to try and always be prepared for the next big thing. Thanks for reading, and as always let me know what you think below or mention me on Twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>