<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>From An Egg</title>
    <link>http://fromanegg.com/index.xml</link>
    <description>Recent content on From An Egg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Jan 2016 13:15:00 -0600</lastBuildDate>
    <atom:link href="http://fromanegg.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The importance of minification and compression</title>
      <link>http://fromanegg.com/post/2016/01/02/the-importance-of-minification-and-compression</link>
      <pubDate>Sat, 02 Jan 2016 13:15:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2016/01/02/the-importance-of-minification-and-compression</guid>
      <description>&lt;p&gt;Over the holidays I’ve been working on a small project playing with some of the new Javascript libraries that came out over the past year. After a while I noticed that the size of the Javascript I was sending to the client was growing and starting to approach 100 KB for a basic isomorphic website. I figured now was a good time to look into minification and compression.&lt;/p&gt;

&lt;p&gt;The site starts out by loading in the following raw code:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Riot.js&lt;/th&gt;
&lt;th&gt;64KB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Page.js&lt;/td&gt;
&lt;td&gt;14KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;client code&lt;/td&gt;
&lt;td&gt;14KB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;92KB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After Browserify was done rolling all of the code up into a single file it was ~92KB which was getting a little large for a website which basically did nothing. First step was to add minification to the Makefile using &lt;a href=&#34;https://github.com/mishoo/UglifyJS2&#34;&gt;UglifyJs2&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;$(CLIENT_MIN_ROLLUP): $(CLIENT_ROLLUP)
	$(UGLIFYJS) --screw-ie8 $^ -o $@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This step brought it down from 92KB to 44KB shaving off over 50% of the original size. This is still quite a lot of code for such a simple site so the next step is to add gzip compression for everything being sent. I am using &lt;a href=&#34;https://github.com/expressjs/express&#34;&gt;expressjs 4.0&lt;/a&gt; as the webserver so to add gzip it’s as easy as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import compression from &#39;compression&#39;;
app.use(compression());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After adding gzip the data sent over the wire went down to an impressive 14KB. That’s only 15% of the original size, a savings of 78KB for a total of about 2 minutes worth of work. This really shows that no matter the size of your website the cost/bennefit of implementing even basic minification and compression is well worth it. If you have any questions or comments leave them in the comments below or mention me on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatically build files when they change with Make</title>
      <link>http://fromanegg.com/post/2015/08/26/automatically-build-files-when-they-change-with-make</link>
      <pubDate>Wed, 26 Aug 2015 12:07:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2015/08/26/automatically-build-files-when-they-change-with-make</guid>
      <description>&lt;p&gt;When writing code which needs to be built before it can be used, whether that’s a transpile step like ES7 JavaScript to ES5, or a compile step like with Go, you’re likely going to want to do this when a file in your application tree is modified. There are a large number of project and language specific tools which were developed to tackle this problem but did you know that there are system level packages available that you can use across all your projects?&lt;/p&gt;

&lt;p&gt;Introducing &lt;a href=&#34;http://linux.die.net/man/1/inotifywait&#34;&gt;inotifywait&lt;/a&gt;, which is an efficient and easy to use cli tool which uses Linux’s inotify interface to watch for changes to the file system. And &lt;a href=&#34;http://emcrisostomo.github.io/fswatch/&#34;&gt;fswatch&lt;/a&gt; for those on OSX. Most of the language and project specific tools are built using wrappers around these two tools.&lt;/p&gt;

&lt;p&gt;If you’re like me and don’t like to add more build tools and layers of abstraction than necessary then you’re probably already using Make to build and develop your application, and you’ll be happy to know that using these tools with it is trivial. Make has no way to know when a file has changed until the next time you run make so because of this many have tried something like the following which will run the build target every 2s.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;watch -n 2 make build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or they will build the loop into the makefile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;.PHONY watch
watch:
  while true; do \
    make build --silent; \
    sleep 1; \
  done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it’s performing a lot of unneccesary work being run in a loop especially since the file system is able to tell us when a file or directory has been modified using inotify. Instead of automatically looping we wait for a file system event that we’re interested in and then run our build target. In the following code we’re able to create a make target in our makefile which will watch for file changes under our specified directory recursively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-make&#34;&gt;.PHONY watch
watch:
  while true; do \
    inotifywait -qr -e modify -e create -e delete -e move app/src; \
    make build; \
  done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works by creating an infinite loop which is started when you run the watch target. Before the first loop can finish it hits inotifywait which sets up listeners on all of the files and directories in your app/src directory. These listeners are waiting for any files to be modified, created, deleted, or moved in or out of app/src/…. When a file or directory changes inotifywait lets the loop continue triggering the call to your build target. That target executes in its entirety building only the file(s) which changed (assuming you’ve properly set up your makefile) and then the loop starts again with inotifywait waiting for those files to change again.&lt;/p&gt;

&lt;p&gt;Using this technique will allow you to create an easy and efficient file change watcher for your makefile without too many additional tools. If you have any questions or comments leave them in the comments below or mention me on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Juju for development</title>
      <link>http://fromanegg.com/post/2015/06/13/using-juju-for-development</link>
      <pubDate>Sat, 13 Jun 2015 16:11:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2015/06/13/using-juju-for-development</guid>
      <description>

&lt;p&gt;Juju works great for software development involving simple environments and is amazing for complex environments. A recent question on Ask Ubuntu &lt;a href=&#34;http://askubuntu.com/questions/635758/is-juju-a-suitable-tool-for-development-as-well-as-deployment&#34;&gt;“Is Juju a suitable tool for development as well as deployment?”&lt;/a&gt; made me realize that we use Juju for development every day but there really isn’t much documentation on the subject.&lt;/p&gt;

&lt;p&gt;For the rest of this post I’m going to assume that you are already familiar with the concept of Juju and what problems it solves on the deployment side of things. If you aren’t, I recommend reading an earlier post of mine &lt;a href=&#34;http://fromanegg.com/post/97035773367/juju-explain-it-to-me-like-im-5&#34;&gt;“Juju - Explain it to me like I’m 5”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the biggest problems when developing any kind of software is getting the dependencies up and running in a way which matches the production environment close enough to be sure that you aren’t going to run into “this environment only” bugs. Sure you can install mysql onto your local machine and run the database dump on that install, but you also have to make sure that you apply all of the same configuration, indexes, build flags, etc. as the production environment.&lt;/p&gt;

&lt;p&gt;Even once you get it up and running you then need the ability to update it after modifications were made by someone else on the project all with high production parity, and without extraneous downtime.&lt;/p&gt;

&lt;p&gt;To illustrate the benefits of using Juju for development I’m going to use a fictitious photo and video sharing website. A website like this would require multiple services, load balancer, web server, database, blob store, user authentication, photo processor, video processor.&lt;/p&gt;

&lt;p&gt;Keeping in mind that a Juju Charm can be written using any programming language or DSL that can be executed on the host machine. This means it can use Puppet, Chef, Python, JavaScript, Docker, and pretty much anything else you would like to use. Juju provides distinct advantages for project development depending on the lifecycle of the project. For our photo video site let’s first assume that we’re just starting the project and then later on we’ll assume that the project is mature, released, and still under active development.&lt;/p&gt;

&lt;h4 id=&#34;just-starting-out&#34;&gt;Just starting out&lt;/h4&gt;

&lt;p&gt;Typically when a project starts you’re only going to need a couple services, the database and your webserver. Let’s start our environment and install the database and webserver on our local machine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;juju bootstrap local
juju deploy apache2
juju deploy mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great, It’s 5 minutes in and we now have apache2 and mongodb running on our machine in separate LXC’s, we can now start developing our website and pointing it to these services.&lt;/p&gt;

&lt;p&gt;Parallel to this, your teammate is working on the user authentication service, it’s going well and they want someone to help them test it in the application environment. So lets get that service that they have been working on.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/charms/trusty &amp;amp;&amp;amp; cd ~/charms/trusty
git clone --depth 1 git@github.com:photovideo/authenticator
juju deploy --repository=. local:trusty/authenticator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;For more information on deploying local charms see &lt;a href=&#34;http://askubuntu.com/questions/568137/how-to-deploy-juju-charm-in-development-branch/568174#568174&#34;&gt;This Post&lt;/a&gt; on Ask Ubuntu.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A few minutes later and you have an identical copy to their user authenticator service, you can point your website to it and give it a try. A little later the authenticator service has been updated and you’d like to run it again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/charms/trusty/authenticator
git pull
juju upgrade-charm --repository=.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This process repeats itself throughout each service and across each member of your team. Allowing each one to update their dependencies within minutes to identical representations of how it’ll be run in production.&lt;/p&gt;

&lt;h4 id=&#34;released-project&#34;&gt;Released project&lt;/h4&gt;

&lt;p&gt;Now that your project has been released, deployed using Juju, running in production, you’ve had a chance to take advantage of Juju’s deployment and scaling features but how does Juju help you develop now?&lt;/p&gt;

&lt;p&gt;In some ways it’s even easier to deploy. In this case, I’m going to assume that your services are private and not stored in the &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju Charm Store&lt;/a&gt;. If they were in there you wouldn’t have to first clone the repositories.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/charms/trusty &amp;amp;&amp;amp; cd ~/charms/trusty
git clone --depth 1 git@github.com:photovideo/mongodb
git clone --depth 1 git@github.com:photovideo/authenticator
…

juju-quickstart -e local photovideo.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Taking advantage of Juju Quickstart and the Juju bundles functionality you can deploy your entire environment with identical services, configuration, and machine placements. This will open up the GUI which will allow you to modify the machine placement of any of those services and change configuration values before deploying to your machine. Once you hit commit, sit back and wait for it to deploy an identical environment to your production environment on your local machine.&lt;/p&gt;

&lt;p&gt;Now you can work on the specific service you’re interested in within an identical environment to everyone on your team. And when a service gets updated by another member on your team it’s trivial to update.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/charms/trusty/authenticator
git pull
juju upgrade-charm --repository=.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope this gets you excited to use Juju for development as well as deployment. My team uses Juju for development this way and has for over a year. It allows us to be more productive because we don’t have to waste time installing and updating services the hard way.&lt;/p&gt;

&lt;p&gt;I’ll be creating a follow-up to this post with real code examples and workflows for doing the actual development of these services, stay tuned! Thanks for reading, if you have any questions or comments file them below or you can hit me up on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write JavaScript like it’s typed</title>
      <link>http://fromanegg.com/post/2015/06/06/write-javascript-like-its-typed</link>
      <pubDate>Sat, 06 Jun 2015 21:44:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2015/06/06/write-javascript-like-its-typed</guid>
      <description>&lt;p&gt;Over my career I’ve written in a number of different programming languages, most of them dynamic. It’s been about 10 years since I last wrote a project from start to finish in a typed language, C++, but recently I’ve been working with Go. It’s safe to say I had become blissfully ignorant of the benefits and challenges of a typed language and in working with Go I found myself really enjoying the explicit declaration of types with regards to stability and code legibility.&lt;/p&gt;

&lt;p&gt;In many JavaScript projects you’ll see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function dataFiller() {
  var myObject = {};
  // 5 lines later
  myObject.Foo = &#39;bar&#39;;
  // 10 lines later
  myObject.Baz = &#39;bax&#39;;
  // 5 lines later
  return myObject;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This essentially means that you must read through an entire functions execution, and sometimes an entire modules execution to see what the structure of that object will become.&lt;/p&gt;

&lt;p&gt;Now lets compare that to Go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type myObject struct{
  Foo string
  Baz string
}

func dataFiller() *myObject {
  var data = &amp;amp;myObject{}
  // 5 lines later
  data.Foo = &amp;quot;bar&amp;quot;
  // 10 lines later
  data.Baz = &amp;quot;bax&amp;quot;
  // 5 lines later
  return data
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you don’t even have to read further than the function declaration to know what the function will return and then you simply have to reference that type in the file to know ahead of time what it’s structure will be.&lt;/p&gt;

&lt;p&gt;Throughout my time as a developer I’ve noticed that it’s quite rare that you cannot predict with 100% certainty what the data structure of your variables will be but, in dynamic languages, we don’t ever seem to outline that structure for people reading and writing the code. So this got me thinking about how this workflow can be adopted in JavaScript to give us the benefits of types using the native language constructs without having to use a compile target like Typescript. In practice it turns out to be quite simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Method to convert defined object literal &#39;type&#39;
// into a &#39;locked down&#39; data store.
function createObject(obj) {
  var stub = Object.create(null);
  var keys = Object.keys(obj).forEach(function(key) {    
    Object.defineProperty(stub, key, {
      configurable: true,
      enumerable: true,
      writable: true,
      value: obj[key]
    });
  });
  Object.seal(stub);
  return stub;
}

// Your &#39;type&#39; which will be used to create
// usable data store instances.
var myObject = {
  Foo: &#39;&#39;,
  Baz: &#39;&#39;
};

// Fills the object with data.
// @method dataFiller
// @return {myObject}
function dataFiller() {
  var data = createObject(myObject);
  // Set values like normal.
  data.Foo = &#39;bar&#39;;
  data.Baz = &#39;bax&#39;;
  return data;
}

var fullData = dataFiller();
fullData.Foo = &amp;quot;can Update&amp;quot;; // Updated
fullData.Qux = &amp;quot;Can&#39;t add new properties&amp;quot;; // Not added
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following this pattern will allow you to write JavaScript with predefined data type which helps tremendously in readability with minimal amount of additional work. This is just a basic example to show how the typed structure could be applied to JavaScript, the createObject() method could be expanded on to add getters and setters which could enforce the property types and you could even expand this idea to use Go like interfaces following a similar structure. I feel the trivial trade-off in additional lines of code is well worth the structure which is now being enforced. What do you think? Have you written a large JavaScript application before where predefined data structures helped? Let me know in the comments below or on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy testing of code involving native methods in JavaScript</title>
      <link>http://fromanegg.com/post/2015/04/22/easy-testing-of-code-involving-native-methods-in-javascript</link>
      <pubDate>Wed, 22 Apr 2015 19:57:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2015/04/22/easy-testing-of-code-involving-native-methods-in-javascript</guid>
      <description>&lt;p&gt;When using ‘use strict;’ in your scripts you’ll find that you are no longer allowed to overwrite native methods like FileReader() so how do you test that these methods are being called with the appropriate parameters? Lets start with a typical function call involving FileReader() and then modify it to make it easier to test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function importFile(file) {
  var reader = new FileReader();
  reader.onload = function(e) {
    processData(e.target.result);
  };
  reader.readAsText(file);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pre &amp;lsquo;use strict’; days you could simply stub out the global FileReader() but since that’s no longer an option we need to get a little creative with our code structure. First thing we’re going to do is create a FileReader instance generator function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function importFile(file) {
  var reader = generateFileReader();
  reader.onload = function(e) {
    processData(e.target.result);
  };
  reader.readAsText(file);
}

function generateFileReader() {
  return new FileReader();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we’ll move the onload callback to a named function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function importFile(file) {
  var reader = generateFileReader();
  reader.onload = _readerOnloadHandler;
  reader.readAsText(file);
}

function generateFileReader() {
  return new FileReader();
}

function _readerOnloadHandler(e) {
  processData(e.target.result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can test the importFile function and its parts by stubbing out the generateFileReader function to return a basic reader stub and not have to worry about the native method. In the following example I’m using two simple stubbing methods to generate stub functions and methods.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;it(&#39;parses files&#39;, function() {
    // Set up the stubs.
    var processStub = stubMethod(&#39;processData&#39;);
    // The second parameter of the stubMethod is what generateFileReader
    // will return when it&#39;s called.
    var reader = stubMethod(&#39;generateFileReader&#39;, {
      onload: null,
      readAsText: stubFunction();
    });
    // Call the public method.
    importFile(&#39;/path/to/file&#39;);
    // Make assertions
    assert.equal(reader.calledOnce(), true);
    assert.equal(reader.readAsText.calledOnce(), true);
    assert.equal(reader.readAsText.lastArguments()[0], &#39;/path/to/file&#39;);
    // Call the callback.
    reader.onload({ target: { result: &#39;file data&#39; }});
    // Make assertions
    assert.equal(processStub.calledOnce(), true);
    assert.equal(processStub.lastArguments()[0], &#39;file data&#39;);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Splitting up the code in this way makes unit testing possible because you are essentially wrapping the native function call in a function which are you are able to stub out. Happy testing!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Juju - Explain it to me like I’m 5</title>
      <link>http://fromanegg.com/post/2014/09/08/juju---explain-it-to-me-like-im-5</link>
      <pubDate>Mon, 08 Sep 2014 23:10:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2014/09/08/juju---explain-it-to-me-like-im-5</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju&lt;/a&gt; is brilliant. Ok I am a little biased being that I work at Canonical on the Juju project, but every week I’m more and more impressed with how awesome Juju is and how easy it makes developing software and working in the cloud. I tweet and post a bunch about Juju but today I was asked to explain what Juju is to someone like they are 5.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/FromAnEgg&#34;&gt;@FromAnEgg&lt;/a&gt; ELI5 Juju..&lt;/p&gt;&amp;mdash; Mark Poppen (@MarkPoppen) &lt;a href=&#34;https://twitter.com/MarkPoppen/status/509113565702127616&#34;&gt;September 8, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Juju is often described as &lt;a href=&#34;https://help.ubuntu.com/12.04/serverguide/apt-get.html&#34;&gt;apt-get&lt;/a&gt; for the cloud, but what does someone who isn’t familiar with the Ubuntu ecosystem know about apt-get? I think I’ll need to go even more abstract…&lt;/p&gt;

&lt;p&gt;Let’s say that you had built the most awesome Lego race car body (kids still play with Lego right?) but you didn’t know how to make the wheels or make it move with one of those Mindstorm engines. So now you have to go and play around for a long time to learn how to make a wheel and how to hook up engines. But this is going to take a long time and your mom is going to call you for supper soon, there has to be someone who is an expert wheel maker and Mindstorm engine builder right? Wouldn’t it be awesome if they could build wheels and engines you could use in your race car so you can finish it before supper?&lt;/p&gt;

&lt;p&gt;Well that is what Juju does. It allows people who have expertise in a specific field to build packages that you can connect to your own projects without needing to be an expert in that field. So how does this help you write software faster in the cloud? Well I think that’s best explained with another, more grown up, example.&lt;/p&gt;

&lt;p&gt;Recently, I wrote a Juju Charm for the &lt;a href=&#34;https://github.com/hatched/ghost-charm&#34;&gt;Ghost blogging platform&lt;/a&gt; so that I can move this blog off of Tumblr and onto something a little more customize-able. The problem? I needed a front end server which was capable of load balancing the webservers when the load picks up and I don’t have the time to learn all about the various options and the best way to install and configure them. So I went to what’s known as the &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju Charm Browser&lt;/a&gt; and picked the &lt;a href=&#34;https://jujucharms.com/haproxy/&#34;&gt;haproxy Charm&lt;/a&gt; and added it into my environment. With multiple web servers I could no longer rely on Ghost’s built in SQLite implementation so I needed to hook up to an external MySQL database. Back to the Charm Browser I went and grabbed the &lt;a href=&#34;https://jujucharms.com/mysql/&#34;&gt;MySQL Charm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/juju-explain-it-to-me-like-Im-5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So now I have a load-balanced horizontally scale-able Ghost blog (coming soon). You can have one too, it’s incredibly easy too. For you to get your very own horizontally scale-able load-balanced Ghost blog all you have to do is execute these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;juju deploy ghost
juju deploy haproxy
juju deploy mysql
juju add-relation ghost haproxy
juju add-relation ghost mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets pretend for a moment that haproxy isn’t cutting it any longer and you instead want to use apache2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;juju destroy-service haproxy
juju deploy apache2
juju add-relation ghost apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe your blog is super popular and you need another 5 webservers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;juju add-unit ghost -n 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it. You have now taken advantage of many peoples domain expertise to develop a cloud environment for your own blog.&lt;/p&gt;

&lt;p&gt;So what if you wanted to use MySQL or any of these other Charms for a different application? That’s the best part these charms are written using the best practices for the particular charm but have easy to interface with hooks. To enable the Ghost charm to communicate with the haproxy charm all I had to write was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;#!/usr/bin/node
var exec = require(&#39;child_process&#39;).exec;
var port, address;

function storePort(err, returnedPort) {
  port = returnedPort;
  exec(&#39;unit-get --format=json private-address&#39;, storeAddress);
}

function storeAddress(err, returnedAddress) {
  address = returnedAddress
  exec(&#39;relation-set port=&#39; + port + &#39; hostname=&#39; + address);
}

exec(&#39;config-get --format=json port&#39;, storePort);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju charms&lt;/a&gt; can be written in anything that can be executed. The Ghost charm was written in JavaScript, the MySQL one in bash. Others use Python, Puppet, Chef, Ansible, even Docker containers can be orchestrated using a Juju Charm.&lt;/p&gt;

&lt;p&gt;Want to run your own wiki:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;juju deploy mediawiki
juju deploy mysql
juju deploy haproxy
juju add-relation mediawiki mysql
juju add-relation mediawiki haproxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How about a &lt;a href=&#34;https://jujucharms.com/mongodb-cluster/&#34;&gt;MongoDB cluster&lt;/a&gt;, &lt;a href=&#34;https://jujucharms.com/q/hadoop-cluster?type=bundle&#34;&gt;Hadoop cluster&lt;/a&gt;, &lt;a href=&#34;https://jujucharms.com/django/&#34;&gt;Django app&lt;/a&gt;, a &lt;a href=&#34;https://jujucharms.com/bundle/transcode/7/cloud/&#34;&gt;video transcoding cluster&lt;/a&gt;, and more including your own applications. All easily deployable and scalable across public clouds like EC2, HP Cloud, Joyent, Your private OpenStack cloud, and even your very own local machine. That’s right, the above commands all work to deploy identical set ups to all of these targets and more.&lt;/p&gt;

&lt;p&gt;This just scratched the surface of the power of &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju&lt;/a&gt; but I hope that this glimpse has made you interested enough to go do some exploring of your own. You can find the documentation to get started with &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju here&lt;/a&gt;. And as always if you have any questions or comments you can comment below, find me on Twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt; on G+ &lt;a href=&#34;https://plus.google.com/+JeffPihach&#34;&gt;+Jeff Pihach&lt;/a&gt; or hop into #juju on irc.freenode.net and ask away.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Release - Juju GUI 1.1.0</title>
      <link>http://fromanegg.com/post/2014/06/17/new-release---juju-gui-1.1.0</link>
      <pubDate>Tue, 17 Jun 2014 13:23:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2014/06/17/new-release---juju-gui-1.1.0</guid>
      <description>&lt;p&gt;Last week we released a new version of the Juju GUI which brings with it one major UI change plus a huge refactoring of the application state system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/new-release-juju-gui-1-1-0-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We moved the inspectors default rendering position to the left over top of the charm browser to give you more room to work with your active environment.&lt;/li&gt;
&lt;li&gt;A new &lt;a href=&#34;http://fromanegg.com/post/85890866087/unidirectional-data-flow-architecture&#34;&gt;uni-directional data flow&lt;/a&gt; system was implemented which dramatically simplified the GUI’s data flow and execution.&lt;/li&gt;
&lt;li&gt;Charm searching has been improved in the charm browser and will continue to be improved over time.&lt;/li&gt;
&lt;li&gt;Work for the new machine view continues under the ‘mv’ flag. To check out this work load up the GUI with ’&lt;hostname&gt;:flags:/mv’.&lt;/li&gt;
&lt;li&gt;Plus many many fixes. See the &lt;a href=&#34;https://github.com/juju/juju-gui&#34;&gt;repository&lt;/a&gt; for more information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any questions about Juju or the Juju GUI, you can read the &lt;a href=&#34;https://jujucharms.com&#34;&gt;official documentation&lt;/a&gt; for Juju and join us on freenode.net in #juju and #juju-gui&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unidirectional data flow architecture</title>
      <link>http://fromanegg.com/post/2014/05/15/unidirectional-data-flow-architecture</link>
      <pubDate>Thu, 15 May 2014 23:18:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2014/05/15/unidirectional-data-flow-architecture</guid>
      <description>&lt;p&gt;Since Facebook released &lt;a href=&#34;https://facebook.github.io/react/docs/flux-overview.html&#34;&gt;Flux&lt;/a&gt; there has been a lot of chatter about the unidirectional data flow architecture and how it helps large scale applications be easier to reason about and develop. With the &lt;a href=&#34;https://github.com/juju/juju-gui&#34;&gt;Juju GUI&lt;/a&gt; nearing 70,000 lines of code in the core application we were running into an issue where it was becoming difficult to maintain the correct state throughout the many rendered UI components which are being consistently changed from the user interactions and changes coming in over the websocket from the users &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju&lt;/a&gt; environment.&lt;/p&gt;

&lt;p&gt;In an effort to remedy this we determined that the only way to solve our current issues and prevent new ones going forward is to develop a unidirectional data flow architecture vs our MVC event style system which was currently in place. The execution flow we decided on was as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/unidirectional-data-flow-architecture-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When a user visits a url or a delta comes in over the websocket it is parsed and split into disparate sections of state for each component that’s involved.&lt;/li&gt;
&lt;li&gt;That state is then saved into the state system.&lt;/li&gt;
&lt;li&gt;When the state system changes it diffs from it’s previous state and passes the diff off to the dispatcher.&lt;/li&gt;
&lt;li&gt;The dispatcher scans through the diff and passes off the various state components to their registered handlers.&lt;/li&gt;
&lt;li&gt;Those handlers then pass the updated data into the UI components.&lt;/li&gt;
&lt;li&gt;The UI components are then responsible for updating their DOM representation.&lt;/li&gt;
&lt;li&gt;If the user makes a change to the UI, that UI component requests a change from the state system and the cycle repeats.
You’ll notice that this is strikingly similar to the Flux architecture:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/unidirectional-data-flow-architecture-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s great to see cases of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiple_discovery&#34;&gt;multiple discovery hypothesis&lt;/a&gt; in action. It’s a sign that you’re on the right track for solving the bigger picture problems. It’s also nice to see someone formalizing this architecture for client side applications in the hopes that others will be able to skip these scalability problems. While our implementation differs from Flux, the architecture is nearly identical. I highly recommend this architecture to anyone writing a large complex application of any kind, client or server side, as it dramatically reduces the complexity of the applications execution.&lt;/p&gt;

&lt;p&gt;Do you work on a large application? Do you think this architecture could help simplify your app? Let me know in the comments below, &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;, or &lt;a href=&#34;https://plus.google.com/+JeffPihach&#34;&gt;+Jeff Pihach&lt;/a&gt; Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When to update your semver version number</title>
      <link>http://fromanegg.com/post/2014/04/25/when-to-update-your-semver-version-number</link>
      <pubDate>Fri, 25 Apr 2014 10:49:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2014/04/25/when-to-update-your-semver-version-number</guid>
      <description>&lt;p&gt;Anyone who is familiar with package versioning has used, or at the very least heard of, Semantic Versioning. For the uninitiated, semver is a three part version number in the format MAJOR.MINOR.PATCH ex) 1.13.2, and you can find very in-depth details on the &lt;a href=&#34;http://semver.org/&#34;&gt;semver website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The semver website outlines the rules for incrementing version numbers as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MAJOR: When you make incompatible API changes.&lt;/li&gt;
&lt;li&gt;MINOR: When you add functionality in a backwards-compatible manner.&lt;/li&gt;
&lt;li&gt;PATCH: When you make backwards compatible bug fixes.
At &lt;a href=&#34;https://gophercon.com/&#34;&gt;gophercon&lt;/a&gt; I had a discussion with another engineer about what these mean. When does a change make the API incompatible with a previous release? Take the following contrived example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your API typically returns a key/value pair for a requested field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ foo: ‘bar’ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But now you decide to change the value returned by capitalizing the first character in the returned strings:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ foo: ‘Bar’ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What portion of the version should be updated with this change?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MAJOR: It could break someones code who is relying on the case of the returned value.&lt;/li&gt;
&lt;li&gt;MINOR: This is adding functionality because the value being returned is actually a title for a story.&lt;/li&gt;
&lt;li&gt;PATCH: Stories should always have been capitalized so this is actually a bug fix.
This shows that the rules are up for a lot of interpretation and will depend heavily on your situation. This unfortunately doesn’t make it easier to explain to someone who is new to, or skeptical of, semver. As a solution I came up with a slightly more specific set of rules which I think make the decision much easier for everyone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jeff’s semver incrementing version number rules:&lt;/p&gt;

&lt;p&gt;I inverted the rule set so it can be read that any later rule overwrites the previous rule so the version section moves up a level.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If this is fixing a reported bug in your system: PATCH&lt;/li&gt;
&lt;li&gt;If this is adding a feature to your public or private api: MINOR&lt;/li&gt;
&lt;li&gt;If this is a change to your private methods or data structures: MINOR&lt;/li&gt;
&lt;li&gt;If it broke your public api call tests: MAJOR
Because your tests should test exactly what you expect your public API to return it should be very trivial to know when a change is breaking what others could be relying on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you think of this approach? Do you find it any easier to understand? Do you have any other rules to add? Or are you already using semver and have a different approach to deciding when to increase which number? Comment below or mention me on twitter &lt;a href=&#34;https://twitter.com/FromAnEgg&#34;&gt;@fromanegg&lt;/a&gt; and let me know. Thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install Ubuntu on a Mac or Macbook</title>
      <link>http://fromanegg.com/post/2014/04/09/how-to-install-ubuntu-on-a-mac-or-macbook</link>
      <pubDate>Wed, 09 Apr 2014 20:09:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2014/04/09/how-to-install-ubuntu-on-a-mac-or-macbook</guid>
      <description>

&lt;p&gt;The official release date of &lt;a href=&#34;http://www.ubuntu.com/download/desktop&#34;&gt;Ubuntu 14.04 LTS Trusty Tahr&lt;/a&gt; is coming up in just over a week from the time of writing. With that, many of you are going to want to install the next version of the best Linux operating system on your computers, and if you want to install on metal along side OSX and have a Apple Mac or Macbook this is the guide for you!&lt;/p&gt;

&lt;p&gt;You’re going to need a few things before we get started:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download Ubuntu 14.04 LTS Trusty Tahr. (If you’re here before it’s released you can download the &lt;a href=&#34;http://cdimage.ubuntu.com/daily-live/current/&#34;&gt;daily image here&lt;/a&gt;. Be sure you download the iso which does NOT have ’+mac’ in the filename. This is for older Apple computers.&lt;/li&gt;
&lt;li&gt;Download the &lt;a href=&#34;http://www.rodsbooks.com/refind/&#34;&gt;rEFInd Boot Manager&lt;/a&gt;. You want the &lt;a href=&#34;http://www.rodsbooks.com/refind/getting.html&#34;&gt;Binary source file zip&lt;/a&gt; which you need to extract.&lt;/li&gt;
&lt;li&gt;A 2GB or bigger USB stick which has nothing on it that you don’t care to lose. This will be our boot stick…(remember when they were boot disks?)&lt;/li&gt;
&lt;li&gt;A thunderbolt to ethernet adapter or if your machine has an ethernet port, plug it in. After installing Ubuntu it is unlikely you will have wifi until the final step.&lt;/li&gt;
&lt;li&gt;Your computers hard drive should have a big chunk of free space…you’re going to use this as your primary operating system afterall!&lt;/li&gt;
&lt;li&gt;An hour or so of free time. This took me about 30 minutes from start to finish but I had done it a number of times by the time I created this post.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;obligatory-warning&#34;&gt;Obligatory Warning&lt;/h4&gt;

&lt;p&gt;All of this information is provided without warranty of any kind. Always make and keep proper backups of your data.&lt;/p&gt;

&lt;h4 id=&#34;step-1&#34;&gt;Step 1&lt;/h4&gt;

&lt;h4 id=&#34;backup-your-computer&#34;&gt;BACKUP YOUR COMPUTER&lt;/h4&gt;

&lt;p&gt;While it’s unlikely that an issue will occur which wipes the data on your disk it’s always highly advisable to have a couple quality backups just in case.&lt;/p&gt;

&lt;p&gt;Go make another backup…I’ll wait.&lt;/p&gt;

&lt;h4 id=&#34;did-you-back-up-your-data-yet&#34;&gt;DID YOU BACK UP YOUR DATA YET?&lt;/h4&gt;

&lt;h4 id=&#34;step-2&#34;&gt;Step 2&lt;/h4&gt;

&lt;p&gt;Now that you have a quality backup safely tucked away you will need to install rEFInd. Open the terminal and navigate to the location that you extracted the zip file and then follow the &lt;a href=&#34;http://www.rodsbooks.com/refind/installing.html#installsh&#34;&gt;installation instructions for OSX&lt;/a&gt;. Once completed, restart your computer to confirm that rEFInd was installed correctly. On rebooting, the rEFInd boot loader should load up and you should select the Apple logo to get back into OSX. (sorry for the sub par photos)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/how-to-install-ubuntu-on-a-mac-or-macbook-1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;step-3&#34;&gt;Step 3&lt;/h4&gt;

&lt;p&gt;Now that you’re back in OSX we need to take that iso of Ubuntu 14.04 that you downloaded and make a bootable USB stick. Follow the &lt;a href=&#34;http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-mac-osx&#34;&gt;10 steps outlined here&lt;/a&gt; to create the bootable stick. You’ll know when it’s ready because OSX will pop open a dialogue saying that it cannot read the device.&lt;/p&gt;

&lt;h4 id=&#34;step-4&#34;&gt;Step 4&lt;/h4&gt;

&lt;p&gt;You need a place to put Ubuntu on your computer, so you’ll need to create a partition on your hard drive. The size of this partition will depend on the size of your disk and what you plan to do in Ubuntu, but it should be at least 10GB to give you some wiggle room (mine is 100GB). To do so you will use the OSX tool ‘Disk Utility’. There are some dated, but still accurate instructions on &lt;a href=&#34;https://help.ubuntu.com/community/MactelSupportTeam/AppleIntelInstallation#Manual_partitioning_using_Disk_Utility_GUI&#34;&gt;creating this partition here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;step-5&#34;&gt;Step 5&lt;/h4&gt;

&lt;p&gt;With the partition made it’s now time to stick the USB stick into your computer and reboot. After rebooting you should land on the rEFInd boot loader again with a few more options than before. If you do not see these options then reboot again holding the “option” key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/how-to-install-ubuntu-on-a-mac-or-macbook-2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Your options may look a little different but you want to pick one of the options which are provided from the USB stick (There are three provided in this image). For the Haswell equipped machines you want to pick the option which reads something along the lines of “Boot EFI\boot\grubx64.efi …” and hit enter. This will start another boot loader with the first option “Install Ubuntu”, hit enter to select this option. After a little while you should be in the Ubuntu installer, follow through the steps until the installer asks you where you would like to install Ubuntu.&lt;/p&gt;

&lt;p&gt;Note: If after progressing through the install process and you find that it boots into a black screen start again from Step 5 but choose an installer without “EFI” in the path name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/how-to-install-ubuntu-on-a-mac-or-macbook-3.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;step-6&#34;&gt;Step 6&lt;/h4&gt;

&lt;p&gt;Note: partitioning will be a little different for everyone so if you get confused hop onto IRC in #ubuntu on freenode.net or create a question on &lt;a href=&#34;http://askubuntu.com&#34;&gt;http://askubuntu.com&lt;/a&gt; for some help.&lt;/p&gt;

&lt;p&gt;When you step through the installer you will get to a pane which asks you where you want to install Ubuntu to. The options should be pretty self explanatory. But if there isn’t an option to install Ubuntu into your new partition you will need to take the manual route. Select the manual partition option and you should be shown a screen which looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/how-to-install-ubuntu-on-a-mac-or-macbook-4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see form this list, I created a 100GB partition originally and then created a 3GB swap partition. To take the partition you created in OSX and create a swap from it you will need to select it then hit the “Change” button and downsize it 3GB. This will leave you with “free space” of 3GB. Click the “+” button and create a new partition of the type “swap”. You’ll want to make sure your primary partition is of type “ext4” and that the mount point is “/”.&lt;/p&gt;

&lt;p&gt;Continue on from here installing Ubuntu to your new partition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/how-to-install-ubuntu-on-a-mac-or-macbook-5.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;step-7&#34;&gt;Step 7&lt;/h4&gt;

&lt;p&gt;After the installation has completed remove the USB stick from your computer and reboot. Now when rEFInd shows up you should have an extra option with the Ubuntu logo. Click it and boot into Ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/how-to-install-ubuntu-on-a-mac-or-macbook-6.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;step-8&#34;&gt;Step 8&lt;/h4&gt;

&lt;p&gt;Once you have logged into Ubuntu, click the &amp;lsquo;System Settings’ icon in the launcher bar on the left. Select &amp;lsquo;Software and Updates’ and then select the &amp;lsquo;Additional Drivers’ tab. After this tab loads you should see a proprietary driver for the Broadcom wireless, select it and click &amp;lsquo;Apply’. Reboot the computer and you should now be able to click the network icon in the top right of the desktop to connect to a wireless connection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/how-to-install-ubuntu-on-a-mac-or-macbook-7.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations you now have Ubuntu installed along side OSX!&lt;/p&gt;

&lt;p&gt;If you run into any problems along the way or have any questions your first stop should be your search engine of choice there are thousands of great resources for Ubuntu scattered around on many topics. You will also find a ton of great people in Ubuntu community hanging out in the #ubuntu room on IRC on freenode.net or if you prefer to ask direct detailed questions check out &lt;a href=&#34;http://askubuntu.com&#34;&gt;http://askubuntu.com&lt;/a&gt;. I hope that this guide has helped you get up and running with Ubuntu, please comment below with any questions or comments or I can be found on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;, thanks for reading!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Self documenting code is not enough</title>
      <link>http://fromanegg.com/post/2014/03/13/self-documenting-code-is-not-enough</link>
      <pubDate>Thu, 13 Mar 2014 09:22:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2014/03/13/self-documenting-code-is-not-enough</guid>
      <description>&lt;p&gt;Our industry moves so fast that just to stay on the curve, let alone ahead of it, you need to spend a considerable amount of time reading other peoples code. Whether that be in code reviews, gists, or open source projects, you can glean a lot of invaluable information about new technologies, protocols, and techniques.&lt;/p&gt;

&lt;p&gt;As an industry as a whole we need to understand this and write all code, even that which at first is not meant for public consumption, as &lt;a href=&#34;https://en.wikipedia.org/wiki/Self-documenting_code&#34;&gt;self-documenting code&lt;/a&gt; with comments which detail, to anyone reading it, the why the code is doing what it’s doing.&lt;/p&gt;

&lt;p&gt;Self-documenting code is code which follows commonly accepted style conventions, and uses descriptive variable, and function names. As an example, self-documenting code turns this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function gd(p1, p2) {
  return [p1.x - p2.x, p1.y - p2.y];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Into:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function getDifference(point1, point2) {
  var x = point1.x - point2.x;
  var y = point2.y - point2.y;
  return [x, y];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s much easier to understand what the second function is doing at a glance vs the first.&lt;/p&gt;

&lt;p&gt;This function is so trivial many will stop here and continue on. But trivial scripts have a way of becoming more, whether they grow into a project of their own or are copy/pasted into much larger projects where their use may not be as clear.&lt;/p&gt;

&lt;p&gt;Lets assume for a moment that this function was copy &amp;amp; pasted into a larger projects utility class. Wouldn’t it be nice if it would automatically be added to the API docs?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
  Calculate the difference between the x and y coords of two points.

  @method getDifference
  @param {Object} point1 The first point to compare.
  @param {Object} point2 The second point to compare.
  @return {Array} The difference between the two points in the format [x, y]
*/
function getDifference(point1, point2) {
  var x = point1.x - point2.x;
  var y = point2.y - point2.y;
  return [x, y];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function can now be copy and pasted into any project without any ambiguity about it’s functionality and will automatically be included in the API documentation.&lt;/p&gt;

&lt;p&gt;To illustrate the importance of inline comments even with self documenting code. Take the following method from the &lt;a href=&#34;https://github.com/juju/juju-gui&#34;&gt;Juju GUI source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Juju GUI has just over 65,000 lines of javascript excluding dependencies and growing fast every day. With so many developers writing code this fast it would be very difficult to understand why things were done the way they were done without the additional 17,000 lines of api comment blocks and inline documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;exportYAML: function() {
  var result = this.db.exportDeployer();
  var exportData = jsyaml.dump(result);
  var exportBlob = new Blob([exportData],
             {type: &#39;text/plain;charset=utf-8&#39;});
  saveAs(exportBlob, &#39;export.yaml&#39;);
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using only self-documenting code you would probably be able to figure out that this function extracts some data from a database, converts it into yaml, then saves the blob to disk. Unfortunately this would have taken you at least 4x longer to parse because it doesn’t have any comments. You would also be missing some very important information from a previous bug fix. Now here it is with it’s comments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**
  Export the YAML for this environment.

  @method exportYAML
*/
exportYAML: function() {
  var result = this.db.exportDeployer();
  var exportData = jsyaml.dump(result);
  // In order to support Safari 7 the type of this blob needs
  // to be text/plain instead of it&#39;s actual type of application/yaml.
  var exportBlob = new Blob([exportData],
      {type: &#39;text/plain;charset=utf-8&#39;});
  saveAs(exportBlob, &#39;export.yaml&#39;);
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without even reading the code you now know what the purpose of this method is which will dramatically reduce time when debugging or adding more features. More importantly however, the why of some of the code is outlined for future-you or another developer who may end up here. Without the comment regarding Safari 7 they very likely could have changed the mime type to application/yaml and introduced a difficult to find bug.&lt;/p&gt;

&lt;p&gt;Although these examples were simple I hope I have illustrated the importance of adding comments to your self-documenting code to aid not only future-you but also any other developer who may come by and learn from your work. Thanks for reading! What commenting techniques do you use? Comment below or mention me on twitter &lt;a href=&#34;https://twitter.com/fromanegg&#34;&gt;@fromanegg&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New release - Juju GUI 0.15.0</title>
      <link>http://fromanegg.com/post/2014/01/26/new-release---juju-gui-0.15.0</link>
      <pubDate>Sun, 26 Jan 2014 12:49:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2014/01/26/new-release---juju-gui-0.15.0</guid>
      <description>&lt;p&gt;Last week the latest version of the Juju GUI was released. With the holidays and our move from Bazaar and Launchpad to &lt;a href=&#34;https://github.com/juju/juju-gui&#34;&gt;Git&lt;/a&gt; and Github there was unfortunately over a month from our last release. Have no fear however because this one brings with it some big changes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/new-release-juju-gui-0-1-0-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We made a large number of bug fixes most of which were reported by you, like incorrect unit counts in bundle details and fixing the inspector height calculations so that it doesn’t hide some of the lower buttons for environments with a lot of units.&lt;/li&gt;
&lt;li&gt;90% speed improvement in the inspector for environments with thousands of units.&lt;/li&gt;
&lt;li&gt;Inspector relations tab now shows the relation statuses and any units that are in error&lt;/li&gt;
&lt;li&gt;The biggest change that we made in this release was entirely removing the full screen browser. This allowed us to remove over 4000 lines of code from our code base speeding up the application start up time and lowering the size of the application sent over the wire.
If you have any questions about Juju or the Juju GUI, you can read the official documentation for &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju&lt;/a&gt; and join us on freenode.net in #juju and #juju-gui .&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>New release - Juju GUI 0.15.0</title>
      <link>http://fromanegg.com/post/2014/01/26/new-release---juju-gui-0.15.0</link>
      <pubDate>Sun, 26 Jan 2014 12:49:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2014/01/26/new-release---juju-gui-0.15.0</guid>
      <description>&lt;p&gt;Over the past month and a half we have done 3 releases of the Juju GUI and with each release came a lot of great functionality. If you are not on 0.13.0 you should definitely upgrade your GUI charm to take advantage of these great new features.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/juju-gui-0-13-0-release-and-updates.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Bundles!&lt;/p&gt;

&lt;p&gt;This is probably the biggest release of the Juju GUI since it was officially unveiled. The GUI now supports importing, exporting, browsing and deploying bundles. A Bundle is a collection of charms, settings and their relations allowing you to deploy entire environments with one click. There is an excellent overview of this feature on the &lt;a href=&#34;https://blog.jujugui.org/2013/11/07/juju-gui-0-12-0-bundles-beta/&#34;&gt;Juju GUI Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jorge Castro also wrote a great blog post on &lt;a href=&#34;http://www.jorgecastro.org/2013/11/14/from-0-to-hero-in-a-few-minutes/&#34;&gt;bundles and juju quickstart&lt;/a&gt; where he deploys a bundle with 17 charms, their settings and relations all with a single command.&lt;/p&gt;

&lt;p&gt;Juju Quickstart plugin (Alpha)&lt;/p&gt;

&lt;p&gt;The alpha release of the &lt;a href=&#34;https://blog.jujugui.org/2013/11/07/juju-quickstart-plugin-alpha-but-useful/&#34;&gt;Juju Quickstart plugin&lt;/a&gt; was also released in the past month. The Juju Quickstart plugin is an opinionated plugin for Juju which makes for quick and easy deployment of the Juju bootstrap node and the Juju GUI. Follow the link for detailed information on it’s functionality.&lt;/p&gt;

&lt;p&gt;As always, if you would like more information about &lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju&lt;/a&gt; or full details about each release they can be found in our changelog.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Canonical to simplify SSO and 2FA using Ubuntu Juju</title>
      <link>http://fromanegg.com/post/2013/12/30/canonical-to-simplify-sso-and-2fa-using-ubuntu-juju</link>
      <pubDate>Mon, 30 Dec 2013 12:09:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/12/30/canonical-to-simplify-sso-and-2fa-using-ubuntu-juju</guid>
      <description>&lt;p&gt;One thing that anyone who has used the internet for more than a day can attest to, is that we have a lot of credentials to remember. Every new product we purchase, every new website we log into, every system in corporate networks need a unique username and password to access. To help combat the huge number of credentials we need to remember many administrators have started to implement what is known as single sign on.&lt;/p&gt;

&lt;p&gt;Single sign on, or SSO, is the practice of having the user to log into a central system which then grants them access to multiple systems. If you have ever logged into a third party website using your Facebook, Google, or Twitter account you have used SSO. From the user perspective this is incredibly convenient because now they only have to remember a single set of credentials for multiple systems. Unfortunately SSO does little to combat users from using simple insecure passwords which, when compromised, will now give the attackers full access to a number of systems instead of just a single one.&lt;/p&gt;

&lt;p&gt;As an additional layer of security many administrators are implementing another layer of security called two factor authentication. 2FA simply means that there are multiple techniques used to identify you when you attempt to gain access to a system. This can be in the form of a text message being sent to your phone, or a random key generated by a third party key generator which is required to be entered along side your typical username and password.&lt;/p&gt;

&lt;p&gt;This all sounds excellent, but unfortunately it is very complicated and time consuming to implement both systems correctly and securely. To solve this issue the great people in Juju Labs at Canonical have started a project to bring instant SSO &amp;amp; 2FA to Juju users everywhere.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/canonical-to-simplify-sso-and-2fa-using-ubuntu-juju-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;How are they going to do it? Because every system from Apache, to MongoDB requires a different technique to implement SSO &amp;amp; 2FA, a third party repository will be created which will house a large collection of expertly written components which will interface with the SSO &amp;amp; 2FA Juju Charm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://fromanegg.com/images/canonical-to-simplify-sso-and-2fa-using-ubuntu-juju-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As with everything in Juju Labs this will require buy-in and support from the community to push forward. There are already three contributors out of the required five to move it to the next stage and a number of people who are very interested in seeing this become a reality. If you are interested in being able to add SSO and 2FA into your systems with a few clicks or want to lend a hand as a contributor you can flip through the slide deck below, spread the word around, or sign up as a contributor.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/eBNYglOmdjExzx&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/mectors/instant-single-signon-and-twofactor-authentication&#34; title=&#34;Instant Single Sign-On and Two-Factor Authentication&#34; target=&#34;_blank&#34;&gt;Instant Single Sign-On and Two-Factor Authentication&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&#34;_blank&#34; href=&#34;//www.slideshare.net/mectors&#34;&gt;Maarten Ectors&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>YUI in the Wild</title>
      <link>http://fromanegg.com/post/2013/12/05/yui-in-the-wild</link>
      <pubDate>Thu, 05 Dec 2013 22:57:00 -0600</pubDate>
      
      <guid>http://fromanegg.com/post/2013/12/05/yui-in-the-wild</guid>
      <description>&lt;p&gt;Earlier today I talked with some of the YUI team about the Juju GUI and how we use YUI for the first ‘YUI in the wild&amp;rsquo;﻿.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lJPdH8xmOWg?rel=0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The links I mentioned in the video:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jujucharms.com&#34;&gt;Juju GUI Demo Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Juju GUI Bazaar repository&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/juju/juju-gui&#34;&gt;Juju GUI Git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>